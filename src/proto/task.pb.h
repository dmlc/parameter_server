// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/task.proto

#ifndef PROTOBUF_proto_2ftask_2eproto__INCLUDED
#define PROTOBUF_proto_2ftask_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/node.pb.h"
#include "proto/range.pb.h"
#include "proto/app.pb.h"
#include "proto/linear_method.pb.h"
#include "proto/filter.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2ftask_2eproto();
void protobuf_AssignDesc_proto_2ftask_2eproto();
void protobuf_ShutdownFile_proto_2ftask_2eproto();

class Task;
class ManageNode;
class ManageApp;
class Timestamp;
class CallSharedPara;
class CallSketch;
class SketchResponse;

enum Task_Type {
  Task_Type_TERMINATE = 1,
  Task_Type_TERMINATE_CONFIRM = 2,
  Task_Type_REPLY = 3,
  Task_Type_MANAGE = 4,
  Task_Type_CALL_CUSTOMER = 5,
  Task_Type_HEARTBEATING = 6
};
bool Task_Type_IsValid(int value);
const Task_Type Task_Type_Type_MIN = Task_Type_TERMINATE;
const Task_Type Task_Type_Type_MAX = Task_Type_HEARTBEATING;
const int Task_Type_Type_ARRAYSIZE = Task_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Task_Type_descriptor();
inline const ::std::string& Task_Type_Name(Task_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Task_Type_descriptor(), value);
}
inline bool Task_Type_Parse(
    const ::std::string& name, Task_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_Type>(
    Task_Type_descriptor(), name, value);
}
enum Task_DataType {
  Task_DataType_OTHER = 0,
  Task_DataType_INT8 = 1,
  Task_DataType_INT16 = 2,
  Task_DataType_INT32 = 3,
  Task_DataType_INT64 = 4,
  Task_DataType_UINT8 = 5,
  Task_DataType_UINT16 = 6,
  Task_DataType_UINT32 = 7,
  Task_DataType_UINT64 = 8,
  Task_DataType_FLOAT = 9,
  Task_DataType_DOUBLE = 10
};
bool Task_DataType_IsValid(int value);
const Task_DataType Task_DataType_DataType_MIN = Task_DataType_OTHER;
const Task_DataType Task_DataType_DataType_MAX = Task_DataType_DOUBLE;
const int Task_DataType_DataType_ARRAYSIZE = Task_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Task_DataType_descriptor();
inline const ::std::string& Task_DataType_Name(Task_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Task_DataType_descriptor(), value);
}
inline bool Task_DataType_Parse(
    const ::std::string& name, Task_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Task_DataType>(
    Task_DataType_descriptor(), name, value);
}
enum ManageNode_Command {
  ManageNode_Command_INIT = 1,
  ManageNode_Command_ADD = 4,
  ManageNode_Command_REPLACE = 2,
  ManageNode_Command_REMOVE = 3
};
bool ManageNode_Command_IsValid(int value);
const ManageNode_Command ManageNode_Command_Command_MIN = ManageNode_Command_INIT;
const ManageNode_Command ManageNode_Command_Command_MAX = ManageNode_Command_ADD;
const int ManageNode_Command_Command_ARRAYSIZE = ManageNode_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* ManageNode_Command_descriptor();
inline const ::std::string& ManageNode_Command_Name(ManageNode_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    ManageNode_Command_descriptor(), value);
}
inline bool ManageNode_Command_Parse(
    const ::std::string& name, ManageNode_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ManageNode_Command>(
    ManageNode_Command_descriptor(), name, value);
}
enum ManageApp_Command {
  ManageApp_Command_ADD = 1,
  ManageApp_Command_REMOVE = 2
};
bool ManageApp_Command_IsValid(int value);
const ManageApp_Command ManageApp_Command_Command_MIN = ManageApp_Command_ADD;
const ManageApp_Command ManageApp_Command_Command_MAX = ManageApp_Command_REMOVE;
const int ManageApp_Command_Command_ARRAYSIZE = ManageApp_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* ManageApp_Command_descriptor();
inline const ::std::string& ManageApp_Command_Name(ManageApp_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    ManageApp_Command_descriptor(), value);
}
inline bool ManageApp_Command_Parse(
    const ::std::string& name, ManageApp_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ManageApp_Command>(
    ManageApp_Command_descriptor(), name, value);
}
enum CallSharedPara_Command {
  CallSharedPara_Command_PUSH = 1,
  CallSharedPara_Command_PULL = 2
};
bool CallSharedPara_Command_IsValid(int value);
const CallSharedPara_Command CallSharedPara_Command_Command_MIN = CallSharedPara_Command_PUSH;
const CallSharedPara_Command CallSharedPara_Command_Command_MAX = CallSharedPara_Command_PULL;
const int CallSharedPara_Command_Command_ARRAYSIZE = CallSharedPara_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* CallSharedPara_Command_descriptor();
inline const ::std::string& CallSharedPara_Command_Name(CallSharedPara_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallSharedPara_Command_descriptor(), value);
}
inline bool CallSharedPara_Command_Parse(
    const ::std::string& name, CallSharedPara_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallSharedPara_Command>(
    CallSharedPara_Command_descriptor(), name, value);
}
enum CallSketch_Command {
  CallSketch_Command_PREPARE_DATA = 1,
  CallSketch_Command_INSERT_DATA = 2,
  CallSketch_Command_EVAL_PROGRESS = 3,
  CallSketch_Command_QUERY_DATA = 4,
  CallSketch_Command_RECOVER = 5
};
bool CallSketch_Command_IsValid(int value);
const CallSketch_Command CallSketch_Command_Command_MIN = CallSketch_Command_PREPARE_DATA;
const CallSketch_Command CallSketch_Command_Command_MAX = CallSketch_Command_RECOVER;
const int CallSketch_Command_Command_ARRAYSIZE = CallSketch_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* CallSketch_Command_descriptor();
inline const ::std::string& CallSketch_Command_Name(CallSketch_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    CallSketch_Command_descriptor(), value);
}
inline bool CallSketch_Command_Parse(
    const ::std::string& name, CallSketch_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CallSketch_Command>(
    CallSketch_Command_descriptor(), name, value);
}
// ===================================================================

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Task_Type Type;
  static const Type TERMINATE = Task_Type_TERMINATE;
  static const Type TERMINATE_CONFIRM = Task_Type_TERMINATE_CONFIRM;
  static const Type REPLY = Task_Type_REPLY;
  static const Type MANAGE = Task_Type_MANAGE;
  static const Type CALL_CUSTOMER = Task_Type_CALL_CUSTOMER;
  static const Type HEARTBEATING = Task_Type_HEARTBEATING;
  static inline bool Type_IsValid(int value) {
    return Task_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Task_Type_Type_MIN;
  static const Type Type_MAX =
    Task_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Task_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Task_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Task_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Task_Type_Parse(name, value);
  }

  typedef Task_DataType DataType;
  static const DataType OTHER = Task_DataType_OTHER;
  static const DataType INT8 = Task_DataType_INT8;
  static const DataType INT16 = Task_DataType_INT16;
  static const DataType INT32 = Task_DataType_INT32;
  static const DataType INT64 = Task_DataType_INT64;
  static const DataType UINT8 = Task_DataType_UINT8;
  static const DataType UINT16 = Task_DataType_UINT16;
  static const DataType UINT32 = Task_DataType_UINT32;
  static const DataType UINT64 = Task_DataType_UINT64;
  static const DataType FLOAT = Task_DataType_FLOAT;
  static const DataType DOUBLE = Task_DataType_DOUBLE;
  static inline bool DataType_IsValid(int value) {
    return Task_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    Task_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    Task_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    Task_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return Task_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return Task_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return Task_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.Task.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::Task_Type type() const;
  inline void set_type(::PS::Task_Type value);

  // optional bool request = 2 [default = false];
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline bool request() const;
  inline void set_request(bool value);

  // optional bool do_not_reply = 3 [default = false];
  inline bool has_do_not_reply() const;
  inline void clear_do_not_reply();
  static const int kDoNotReplyFieldNumber = 3;
  inline bool do_not_reply() const;
  inline void set_do_not_reply(bool value);

  // optional string customer = 4;
  inline bool has_customer() const;
  inline void clear_customer();
  static const int kCustomerFieldNumber = 4;
  inline const ::std::string& customer() const;
  inline void set_customer(const ::std::string& value);
  inline void set_customer(const char* value);
  inline void set_customer(const char* value, size_t size);
  inline ::std::string* mutable_customer();
  inline ::std::string* release_customer();
  inline void set_allocated_customer(::std::string* customer);

  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 wait_time = 6 [default = -1];
  inline bool has_wait_time() const;
  inline void clear_wait_time();
  static const int kWaitTimeFieldNumber = 6;
  inline ::google::protobuf::int32 wait_time() const;
  inline void set_wait_time(::google::protobuf::int32 value);

  // optional .PS.PbRange key_range = 7;
  inline bool has_key_range() const;
  inline void clear_key_range();
  static const int kKeyRangeFieldNumber = 7;
  inline const ::PS::PbRange& key_range() const;
  inline ::PS::PbRange* mutable_key_range();
  inline ::PS::PbRange* release_key_range();
  inline void set_allocated_key_range(::PS::PbRange* key_range);

  // optional int32 key_channel = 8;
  inline bool has_key_channel() const;
  inline void clear_key_channel();
  static const int kKeyChannelFieldNumber = 8;
  inline ::google::protobuf::int32 key_channel() const;
  inline void set_key_channel(::google::protobuf::int32 value);

  // optional bool has_key = 9 [default = false];
  inline bool has_has_key() const;
  inline void clear_has_key();
  static const int kHasKeyFieldNumber = 9;
  inline bool has_key() const;
  inline void set_has_key(bool value);

  // optional .PS.Task.DataType key_type = 13;
  inline bool has_key_type() const;
  inline void clear_key_type();
  static const int kKeyTypeFieldNumber = 13;
  inline ::PS::Task_DataType key_type() const;
  inline void set_key_type(::PS::Task_DataType value);

  // repeated .PS.Task.DataType value_type = 14;
  inline int value_type_size() const;
  inline void clear_value_type();
  static const int kValueTypeFieldNumber = 14;
  inline ::PS::Task_DataType value_type(int index) const;
  inline void set_value_type(int index, ::PS::Task_DataType value);
  inline void add_value_type(::PS::Task_DataType value);
  inline const ::google::protobuf::RepeatedField<int>& value_type() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_value_type();

  // repeated .PS.FilterConfig filter = 12;
  inline int filter_size() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 12;
  inline const ::PS::FilterConfig& filter(int index) const;
  inline ::PS::FilterConfig* mutable_filter(int index);
  inline ::PS::FilterConfig* add_filter();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig >&
      filter() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig >*
      mutable_filter();

  // optional bytes msg = 101;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 101;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .PS.ManageNode mng_node = 102;
  inline bool has_mng_node() const;
  inline void clear_mng_node();
  static const int kMngNodeFieldNumber = 102;
  inline const ::PS::ManageNode& mng_node() const;
  inline ::PS::ManageNode* mutable_mng_node();
  inline ::PS::ManageNode* release_mng_node();
  inline void set_allocated_mng_node(::PS::ManageNode* mng_node);

  // optional .PS.ManageApp mng_app = 103;
  inline bool has_mng_app() const;
  inline void clear_mng_app();
  static const int kMngAppFieldNumber = 103;
  inline const ::PS::ManageApp& mng_app() const;
  inline ::PS::ManageApp* mutable_mng_app();
  inline ::PS::ManageApp* release_mng_app();
  inline void set_allocated_mng_app(::PS::ManageApp* mng_app);

  // optional .PS.CallSharedPara shared_para = 201;
  inline bool has_shared_para() const;
  inline void clear_shared_para();
  static const int kSharedParaFieldNumber = 201;
  inline const ::PS::CallSharedPara& shared_para() const;
  inline ::PS::CallSharedPara* mutable_shared_para();
  inline ::PS::CallSharedPara* release_shared_para();
  inline void set_allocated_shared_para(::PS::CallSharedPara* shared_para);

  // optional .PS.LM.Call linear_method = 301;
  inline bool has_linear_method() const;
  inline void clear_linear_method();
  static const int kLinearMethodFieldNumber = 301;
  inline const ::PS::LM::Call& linear_method() const;
  inline ::PS::LM::Call* mutable_linear_method();
  inline ::PS::LM::Call* release_linear_method();
  inline void set_allocated_linear_method(::PS::LM::Call* linear_method);

  // optional .PS.CallSketch sketch = 302;
  inline bool has_sketch() const;
  inline void clear_sketch();
  static const int kSketchFieldNumber = 302;
  inline const ::PS::CallSketch& sketch() const;
  inline ::PS::CallSketch* mutable_sketch();
  inline ::PS::CallSketch* release_sketch();
  inline void set_allocated_sketch(::PS::CallSketch* sketch);

  // @@protoc_insertion_point(class_scope:PS.Task)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_do_not_reply();
  inline void clear_has_do_not_reply();
  inline void set_has_customer();
  inline void clear_has_customer();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_wait_time();
  inline void clear_has_wait_time();
  inline void set_has_key_range();
  inline void clear_has_key_range();
  inline void set_has_key_channel();
  inline void clear_has_key_channel();
  inline void set_has_has_key();
  inline void clear_has_has_key();
  inline void set_has_key_type();
  inline void clear_has_key_type();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_mng_node();
  inline void clear_has_mng_node();
  inline void set_has_mng_app();
  inline void clear_has_mng_app();
  inline void set_has_shared_para();
  inline void clear_has_shared_para();
  inline void set_has_linear_method();
  inline void clear_has_linear_method();
  inline void set_has_sketch();
  inline void clear_has_sketch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  bool request_;
  bool do_not_reply_;
  bool has_key_;
  ::std::string* customer_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 wait_time_;
  ::PS::PbRange* key_range_;
  ::google::protobuf::int32 key_channel_;
  int key_type_;
  ::google::protobuf::RepeatedField<int> value_type_;
  ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig > filter_;
  ::std::string* msg_;
  ::PS::ManageNode* mng_node_;
  ::PS::ManageApp* mng_app_;
  ::PS::CallSharedPara* shared_para_;
  ::PS::LM::Call* linear_method_;
  ::PS::CallSketch* sketch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ftask_2eproto();
  friend void protobuf_AssignDesc_proto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class ManageNode : public ::google::protobuf::Message {
 public:
  ManageNode();
  virtual ~ManageNode();

  ManageNode(const ManageNode& from);

  inline ManageNode& operator=(const ManageNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManageNode& default_instance();

  void Swap(ManageNode* other);

  // implements Message ----------------------------------------------

  ManageNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManageNode& from);
  void MergeFrom(const ManageNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ManageNode_Command Command;
  static const Command INIT = ManageNode_Command_INIT;
  static const Command ADD = ManageNode_Command_ADD;
  static const Command REPLACE = ManageNode_Command_REPLACE;
  static const Command REMOVE = ManageNode_Command_REMOVE;
  static inline bool Command_IsValid(int value) {
    return ManageNode_Command_IsValid(value);
  }
  static const Command Command_MIN =
    ManageNode_Command_Command_MIN;
  static const Command Command_MAX =
    ManageNode_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    ManageNode_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return ManageNode_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return ManageNode_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return ManageNode_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.ManageNode.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::ManageNode_Command cmd() const;
  inline void set_cmd(::PS::ManageNode_Command value);

  // repeated .PS.Node node = 2;
  inline int node_size() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 2;
  inline const ::PS::Node& node(int index) const;
  inline ::PS::Node* mutable_node(int index);
  inline ::PS::Node* add_node();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::Node >&
      node() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::Node >*
      mutable_node();

  // @@protoc_insertion_point(class_scope:PS.ManageNode)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PS::Node > node_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ftask_2eproto();
  friend void protobuf_AssignDesc_proto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static ManageNode* default_instance_;
};
// -------------------------------------------------------------------

class ManageApp : public ::google::protobuf::Message {
 public:
  ManageApp();
  virtual ~ManageApp();

  ManageApp(const ManageApp& from);

  inline ManageApp& operator=(const ManageApp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManageApp& default_instance();

  void Swap(ManageApp* other);

  // implements Message ----------------------------------------------

  ManageApp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ManageApp& from);
  void MergeFrom(const ManageApp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ManageApp_Command Command;
  static const Command ADD = ManageApp_Command_ADD;
  static const Command REMOVE = ManageApp_Command_REMOVE;
  static inline bool Command_IsValid(int value) {
    return ManageApp_Command_IsValid(value);
  }
  static const Command Command_MIN =
    ManageApp_Command_Command_MIN;
  static const Command Command_MAX =
    ManageApp_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    ManageApp_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return ManageApp_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return ManageApp_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return ManageApp_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.ManageApp.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::ManageApp_Command cmd() const;
  inline void set_cmd(::PS::ManageApp_Command value);

  // required .PS.AppConfig app_config = 2;
  inline bool has_app_config() const;
  inline void clear_app_config();
  static const int kAppConfigFieldNumber = 2;
  inline const ::PS::AppConfig& app_config() const;
  inline ::PS::AppConfig* mutable_app_config();
  inline ::PS::AppConfig* release_app_config();
  inline void set_allocated_app_config(::PS::AppConfig* app_config);

  // @@protoc_insertion_point(class_scope:PS.ManageApp)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_app_config();
  inline void clear_has_app_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::AppConfig* app_config_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ftask_2eproto();
  friend void protobuf_AssignDesc_proto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static ManageApp* default_instance_;
};
// -------------------------------------------------------------------

class Timestamp : public ::google::protobuf::Message {
 public:
  Timestamp();
  virtual ~Timestamp();

  Timestamp(const Timestamp& from);

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Timestamp& default_instance();

  void Swap(Timestamp* other);

  // implements Message ----------------------------------------------

  Timestamp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // required int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.Timestamp)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sender_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ftask_2eproto();
  friend void protobuf_AssignDesc_proto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static Timestamp* default_instance_;
};
// -------------------------------------------------------------------

class CallSharedPara : public ::google::protobuf::Message {
 public:
  CallSharedPara();
  virtual ~CallSharedPara();

  CallSharedPara(const CallSharedPara& from);

  inline CallSharedPara& operator=(const CallSharedPara& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallSharedPara& default_instance();

  void Swap(CallSharedPara* other);

  // implements Message ----------------------------------------------

  CallSharedPara* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallSharedPara& from);
  void MergeFrom(const CallSharedPara& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CallSharedPara_Command Command;
  static const Command PUSH = CallSharedPara_Command_PUSH;
  static const Command PULL = CallSharedPara_Command_PULL;
  static inline bool Command_IsValid(int value) {
    return CallSharedPara_Command_IsValid(value);
  }
  static const Command Command_MIN =
    CallSharedPara_Command_Command_MIN;
  static const Command Command_MAX =
    CallSharedPara_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    CallSharedPara_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return CallSharedPara_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return CallSharedPara_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return CallSharedPara_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.CallSharedPara.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::CallSharedPara_Command cmd() const;
  inline void set_cmd(::PS::CallSharedPara_Command value);

  // optional bool insert_key_freq = 3;
  inline bool has_insert_key_freq() const;
  inline void clear_insert_key_freq();
  static const int kInsertKeyFreqFieldNumber = 3;
  inline bool insert_key_freq() const;
  inline void set_insert_key_freq(bool value);

  // optional int32 query_key_freq = 4;
  inline bool has_query_key_freq() const;
  inline void clear_query_key_freq();
  static const int kQueryKeyFreqFieldNumber = 4;
  inline ::google::protobuf::int32 query_key_freq() const;
  inline void set_query_key_freq(::google::protobuf::int32 value);

  // optional bool insert_key = 5;
  inline bool has_insert_key() const;
  inline void clear_insert_key();
  static const int kInsertKeyFieldNumber = 5;
  inline bool insert_key() const;
  inline void set_insert_key(bool value);

  // optional int32 countmin_n = 6;
  inline bool has_countmin_n() const;
  inline void clear_countmin_n();
  static const int kCountminNFieldNumber = 6;
  inline ::google::protobuf::int32 countmin_n() const;
  inline void set_countmin_n(::google::protobuf::int32 value);

  // optional int32 countmin_k = 7;
  inline bool has_countmin_k() const;
  inline void clear_countmin_k();
  static const int kCountminKFieldNumber = 7;
  inline ::google::protobuf::int32 countmin_k() const;
  inline void set_countmin_k(::google::protobuf::int32 value);

  // optional bool replica = 10;
  inline bool has_replica() const;
  inline void clear_replica();
  static const int kReplicaFieldNumber = 10;
  inline bool replica() const;
  inline void set_replica(bool value);

  // repeated .PS.Timestamp backup = 11;
  inline int backup_size() const;
  inline void clear_backup();
  static const int kBackupFieldNumber = 11;
  inline const ::PS::Timestamp& backup(int index) const;
  inline ::PS::Timestamp* mutable_backup(int index);
  inline ::PS::Timestamp* add_backup();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::Timestamp >&
      backup() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::Timestamp >*
      mutable_backup();

  // @@protoc_insertion_point(class_scope:PS.CallSharedPara)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_insert_key_freq();
  inline void clear_has_insert_key_freq();
  inline void set_has_query_key_freq();
  inline void clear_has_query_key_freq();
  inline void set_has_insert_key();
  inline void clear_has_insert_key();
  inline void set_has_countmin_n();
  inline void clear_has_countmin_n();
  inline void set_has_countmin_k();
  inline void clear_has_countmin_k();
  inline void set_has_replica();
  inline void clear_has_replica();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int cmd_;
  ::google::protobuf::int32 query_key_freq_;
  bool insert_key_freq_;
  bool insert_key_;
  bool replica_;
  ::google::protobuf::int32 countmin_n_;
  ::google::protobuf::RepeatedPtrField< ::PS::Timestamp > backup_;
  ::google::protobuf::int32 countmin_k_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ftask_2eproto();
  friend void protobuf_AssignDesc_proto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static CallSharedPara* default_instance_;
};
// -------------------------------------------------------------------

class CallSketch : public ::google::protobuf::Message {
 public:
  CallSketch();
  virtual ~CallSketch();

  CallSketch(const CallSketch& from);

  inline CallSketch& operator=(const CallSketch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CallSketch& default_instance();

  void Swap(CallSketch* other);

  // implements Message ----------------------------------------------

  CallSketch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallSketch& from);
  void MergeFrom(const CallSketch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CallSketch_Command Command;
  static const Command PREPARE_DATA = CallSketch_Command_PREPARE_DATA;
  static const Command INSERT_DATA = CallSketch_Command_INSERT_DATA;
  static const Command EVAL_PROGRESS = CallSketch_Command_EVAL_PROGRESS;
  static const Command QUERY_DATA = CallSketch_Command_QUERY_DATA;
  static const Command RECOVER = CallSketch_Command_RECOVER;
  static inline bool Command_IsValid(int value) {
    return CallSketch_Command_IsValid(value);
  }
  static const Command Command_MIN =
    CallSketch_Command_Command_MIN;
  static const Command Command_MAX =
    CallSketch_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    CallSketch_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return CallSketch_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return CallSketch_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return CallSketch_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.CallSketch.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::CallSketch_Command cmd() const;
  inline void set_cmd(::PS::CallSketch_Command value);

  // optional .PS.PbRange key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::PS::PbRange& key() const;
  inline ::PS::PbRange* mutable_key();
  inline ::PS::PbRange* release_key();
  inline void set_allocated_key(::PS::PbRange* key);

  // @@protoc_insertion_point(class_scope:PS.CallSketch)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::PbRange* key_;
  int cmd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ftask_2eproto();
  friend void protobuf_AssignDesc_proto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static CallSketch* default_instance_;
};
// -------------------------------------------------------------------

class SketchResponse : public ::google::protobuf::Message {
 public:
  SketchResponse();
  virtual ~SketchResponse();

  SketchResponse(const SketchResponse& from);

  inline SketchResponse& operator=(const SketchResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SketchResponse& default_instance();

  void Swap(SketchResponse* other);

  // implements Message ----------------------------------------------

  SketchResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SketchResponse& from);
  void MergeFrom(const SketchResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string nodeid = 1;
  inline bool has_nodeid() const;
  inline void clear_nodeid();
  static const int kNodeidFieldNumber = 1;
  inline const ::std::string& nodeid() const;
  inline void set_nodeid(const ::std::string& value);
  inline void set_nodeid(const char* value);
  inline void set_nodeid(const char* value, size_t size);
  inline ::std::string* mutable_nodeid();
  inline ::std::string* release_nodeid();
  inline void set_allocated_nodeid(::std::string* nodeid);

  // optional double process_time = 2;
  inline bool has_process_time() const;
  inline void clear_process_time();
  static const int kProcessTimeFieldNumber = 2;
  inline double process_time() const;
  inline void set_process_time(double value);

  // optional uint32 payload = 3;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 3;
  inline ::google::protobuf::uint32 payload() const;
  inline void set_payload(::google::protobuf::uint32 value);

  // optional uint32 key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PS.SketchResponse)
 private:
  inline void set_has_nodeid();
  inline void clear_has_nodeid();
  inline void set_has_process_time();
  inline void clear_has_process_time();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nodeid_;
  double process_time_;
  ::google::protobuf::uint32 payload_;
  ::google::protobuf::uint32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2ftask_2eproto();
  friend void protobuf_AssignDesc_proto_2ftask_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftask_2eproto();

  void InitAsDefaultInstance();
  static SketchResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// Task

// required .PS.Task.Type type = 1;
inline bool Task::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::Task_Type Task::type() const {
  return static_cast< ::PS::Task_Type >(type_);
}
inline void Task::set_type(::PS::Task_Type value) {
  assert(::PS::Task_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional bool request = 2 [default = false];
inline bool Task::has_request() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_request() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_request() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_request() {
  request_ = false;
  clear_has_request();
}
inline bool Task::request() const {
  return request_;
}
inline void Task::set_request(bool value) {
  set_has_request();
  request_ = value;
}

// optional bool do_not_reply = 3 [default = false];
inline bool Task::has_do_not_reply() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_do_not_reply() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_do_not_reply() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_do_not_reply() {
  do_not_reply_ = false;
  clear_has_do_not_reply();
}
inline bool Task::do_not_reply() const {
  return do_not_reply_;
}
inline void Task::set_do_not_reply(bool value) {
  set_has_do_not_reply();
  do_not_reply_ = value;
}

// optional string customer = 4;
inline bool Task::has_customer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_customer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_customer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_customer() {
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    customer_->clear();
  }
  clear_has_customer();
}
inline const ::std::string& Task::customer() const {
  return *customer_;
}
inline void Task::set_customer(const ::std::string& value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
}
inline void Task::set_customer(const char* value) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(value);
}
inline void Task::set_customer(const char* value, size_t size) {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  customer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_customer() {
  set_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    customer_ = new ::std::string;
  }
  return customer_;
}
inline ::std::string* Task::release_customer() {
  clear_has_customer();
  if (customer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = customer_;
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_customer(::std::string* customer) {
  if (customer_ != &::google::protobuf::internal::kEmptyString) {
    delete customer_;
  }
  if (customer) {
    set_has_customer();
    customer_ = customer;
  } else {
    clear_has_customer();
    customer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 time = 5;
inline bool Task::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Task::time() const {
  return time_;
}
inline void Task::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 wait_time = 6 [default = -1];
inline bool Task::has_wait_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_wait_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_wait_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_wait_time() {
  wait_time_ = -1;
  clear_has_wait_time();
}
inline ::google::protobuf::int32 Task::wait_time() const {
  return wait_time_;
}
inline void Task::set_wait_time(::google::protobuf::int32 value) {
  set_has_wait_time();
  wait_time_ = value;
}

// optional .PS.PbRange key_range = 7;
inline bool Task::has_key_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_key_range() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_key_range() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_key_range() {
  if (key_range_ != NULL) key_range_->::PS::PbRange::Clear();
  clear_has_key_range();
}
inline const ::PS::PbRange& Task::key_range() const {
  return key_range_ != NULL ? *key_range_ : *default_instance_->key_range_;
}
inline ::PS::PbRange* Task::mutable_key_range() {
  set_has_key_range();
  if (key_range_ == NULL) key_range_ = new ::PS::PbRange;
  return key_range_;
}
inline ::PS::PbRange* Task::release_key_range() {
  clear_has_key_range();
  ::PS::PbRange* temp = key_range_;
  key_range_ = NULL;
  return temp;
}
inline void Task::set_allocated_key_range(::PS::PbRange* key_range) {
  delete key_range_;
  key_range_ = key_range;
  if (key_range) {
    set_has_key_range();
  } else {
    clear_has_key_range();
  }
}

// optional int32 key_channel = 8;
inline bool Task::has_key_channel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Task::set_has_key_channel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Task::clear_has_key_channel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Task::clear_key_channel() {
  key_channel_ = 0;
  clear_has_key_channel();
}
inline ::google::protobuf::int32 Task::key_channel() const {
  return key_channel_;
}
inline void Task::set_key_channel(::google::protobuf::int32 value) {
  set_has_key_channel();
  key_channel_ = value;
}

// optional bool has_key = 9 [default = false];
inline bool Task::has_has_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Task::set_has_has_key() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Task::clear_has_has_key() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Task::clear_has_key() {
  has_key_ = false;
  clear_has_has_key();
}
inline bool Task::has_key() const {
  return has_key_;
}
inline void Task::set_has_key(bool value) {
  set_has_has_key();
  has_key_ = value;
}

// optional .PS.Task.DataType key_type = 13;
inline bool Task::has_key_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Task::set_has_key_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Task::clear_has_key_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Task::clear_key_type() {
  key_type_ = 0;
  clear_has_key_type();
}
inline ::PS::Task_DataType Task::key_type() const {
  return static_cast< ::PS::Task_DataType >(key_type_);
}
inline void Task::set_key_type(::PS::Task_DataType value) {
  assert(::PS::Task_DataType_IsValid(value));
  set_has_key_type();
  key_type_ = value;
}

// repeated .PS.Task.DataType value_type = 14;
inline int Task::value_type_size() const {
  return value_type_.size();
}
inline void Task::clear_value_type() {
  value_type_.Clear();
}
inline ::PS::Task_DataType Task::value_type(int index) const {
  return static_cast< ::PS::Task_DataType >(value_type_.Get(index));
}
inline void Task::set_value_type(int index, ::PS::Task_DataType value) {
  assert(::PS::Task_DataType_IsValid(value));
  value_type_.Set(index, value);
}
inline void Task::add_value_type(::PS::Task_DataType value) {
  assert(::PS::Task_DataType_IsValid(value));
  value_type_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
Task::value_type() const {
  return value_type_;
}
inline ::google::protobuf::RepeatedField<int>*
Task::mutable_value_type() {
  return &value_type_;
}

// repeated .PS.FilterConfig filter = 12;
inline int Task::filter_size() const {
  return filter_.size();
}
inline void Task::clear_filter() {
  filter_.Clear();
}
inline const ::PS::FilterConfig& Task::filter(int index) const {
  return filter_.Get(index);
}
inline ::PS::FilterConfig* Task::mutable_filter(int index) {
  return filter_.Mutable(index);
}
inline ::PS::FilterConfig* Task::add_filter() {
  return filter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig >&
Task::filter() const {
  return filter_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::FilterConfig >*
Task::mutable_filter() {
  return &filter_;
}

// optional bytes msg = 101;
inline bool Task::has_msg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Task::set_has_msg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Task::clear_has_msg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Task::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Task::msg() const {
  return *msg_;
}
inline void Task::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Task::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void Task::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* Task::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Task::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .PS.ManageNode mng_node = 102;
inline bool Task::has_mng_node() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Task::set_has_mng_node() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Task::clear_has_mng_node() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Task::clear_mng_node() {
  if (mng_node_ != NULL) mng_node_->::PS::ManageNode::Clear();
  clear_has_mng_node();
}
inline const ::PS::ManageNode& Task::mng_node() const {
  return mng_node_ != NULL ? *mng_node_ : *default_instance_->mng_node_;
}
inline ::PS::ManageNode* Task::mutable_mng_node() {
  set_has_mng_node();
  if (mng_node_ == NULL) mng_node_ = new ::PS::ManageNode;
  return mng_node_;
}
inline ::PS::ManageNode* Task::release_mng_node() {
  clear_has_mng_node();
  ::PS::ManageNode* temp = mng_node_;
  mng_node_ = NULL;
  return temp;
}
inline void Task::set_allocated_mng_node(::PS::ManageNode* mng_node) {
  delete mng_node_;
  mng_node_ = mng_node;
  if (mng_node) {
    set_has_mng_node();
  } else {
    clear_has_mng_node();
  }
}

// optional .PS.ManageApp mng_app = 103;
inline bool Task::has_mng_app() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Task::set_has_mng_app() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Task::clear_has_mng_app() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Task::clear_mng_app() {
  if (mng_app_ != NULL) mng_app_->::PS::ManageApp::Clear();
  clear_has_mng_app();
}
inline const ::PS::ManageApp& Task::mng_app() const {
  return mng_app_ != NULL ? *mng_app_ : *default_instance_->mng_app_;
}
inline ::PS::ManageApp* Task::mutable_mng_app() {
  set_has_mng_app();
  if (mng_app_ == NULL) mng_app_ = new ::PS::ManageApp;
  return mng_app_;
}
inline ::PS::ManageApp* Task::release_mng_app() {
  clear_has_mng_app();
  ::PS::ManageApp* temp = mng_app_;
  mng_app_ = NULL;
  return temp;
}
inline void Task::set_allocated_mng_app(::PS::ManageApp* mng_app) {
  delete mng_app_;
  mng_app_ = mng_app;
  if (mng_app) {
    set_has_mng_app();
  } else {
    clear_has_mng_app();
  }
}

// optional .PS.CallSharedPara shared_para = 201;
inline bool Task::has_shared_para() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Task::set_has_shared_para() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Task::clear_has_shared_para() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Task::clear_shared_para() {
  if (shared_para_ != NULL) shared_para_->::PS::CallSharedPara::Clear();
  clear_has_shared_para();
}
inline const ::PS::CallSharedPara& Task::shared_para() const {
  return shared_para_ != NULL ? *shared_para_ : *default_instance_->shared_para_;
}
inline ::PS::CallSharedPara* Task::mutable_shared_para() {
  set_has_shared_para();
  if (shared_para_ == NULL) shared_para_ = new ::PS::CallSharedPara;
  return shared_para_;
}
inline ::PS::CallSharedPara* Task::release_shared_para() {
  clear_has_shared_para();
  ::PS::CallSharedPara* temp = shared_para_;
  shared_para_ = NULL;
  return temp;
}
inline void Task::set_allocated_shared_para(::PS::CallSharedPara* shared_para) {
  delete shared_para_;
  shared_para_ = shared_para;
  if (shared_para) {
    set_has_shared_para();
  } else {
    clear_has_shared_para();
  }
}

// optional .PS.LM.Call linear_method = 301;
inline bool Task::has_linear_method() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Task::set_has_linear_method() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Task::clear_has_linear_method() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Task::clear_linear_method() {
  if (linear_method_ != NULL) linear_method_->::PS::LM::Call::Clear();
  clear_has_linear_method();
}
inline const ::PS::LM::Call& Task::linear_method() const {
  return linear_method_ != NULL ? *linear_method_ : *default_instance_->linear_method_;
}
inline ::PS::LM::Call* Task::mutable_linear_method() {
  set_has_linear_method();
  if (linear_method_ == NULL) linear_method_ = new ::PS::LM::Call;
  return linear_method_;
}
inline ::PS::LM::Call* Task::release_linear_method() {
  clear_has_linear_method();
  ::PS::LM::Call* temp = linear_method_;
  linear_method_ = NULL;
  return temp;
}
inline void Task::set_allocated_linear_method(::PS::LM::Call* linear_method) {
  delete linear_method_;
  linear_method_ = linear_method;
  if (linear_method) {
    set_has_linear_method();
  } else {
    clear_has_linear_method();
  }
}

// optional .PS.CallSketch sketch = 302;
inline bool Task::has_sketch() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Task::set_has_sketch() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Task::clear_has_sketch() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Task::clear_sketch() {
  if (sketch_ != NULL) sketch_->::PS::CallSketch::Clear();
  clear_has_sketch();
}
inline const ::PS::CallSketch& Task::sketch() const {
  return sketch_ != NULL ? *sketch_ : *default_instance_->sketch_;
}
inline ::PS::CallSketch* Task::mutable_sketch() {
  set_has_sketch();
  if (sketch_ == NULL) sketch_ = new ::PS::CallSketch;
  return sketch_;
}
inline ::PS::CallSketch* Task::release_sketch() {
  clear_has_sketch();
  ::PS::CallSketch* temp = sketch_;
  sketch_ = NULL;
  return temp;
}
inline void Task::set_allocated_sketch(::PS::CallSketch* sketch) {
  delete sketch_;
  sketch_ = sketch;
  if (sketch) {
    set_has_sketch();
  } else {
    clear_has_sketch();
  }
}

// -------------------------------------------------------------------

// ManageNode

// required .PS.ManageNode.Command cmd = 1;
inline bool ManageNode::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManageNode::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManageNode::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManageNode::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::ManageNode_Command ManageNode::cmd() const {
  return static_cast< ::PS::ManageNode_Command >(cmd_);
}
inline void ManageNode::set_cmd(::PS::ManageNode_Command value) {
  assert(::PS::ManageNode_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// repeated .PS.Node node = 2;
inline int ManageNode::node_size() const {
  return node_.size();
}
inline void ManageNode::clear_node() {
  node_.Clear();
}
inline const ::PS::Node& ManageNode::node(int index) const {
  return node_.Get(index);
}
inline ::PS::Node* ManageNode::mutable_node(int index) {
  return node_.Mutable(index);
}
inline ::PS::Node* ManageNode::add_node() {
  return node_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::Node >&
ManageNode::node() const {
  return node_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::Node >*
ManageNode::mutable_node() {
  return &node_;
}

// -------------------------------------------------------------------

// ManageApp

// required .PS.ManageApp.Command cmd = 1;
inline bool ManageApp::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ManageApp::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ManageApp::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ManageApp::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::ManageApp_Command ManageApp::cmd() const {
  return static_cast< ::PS::ManageApp_Command >(cmd_);
}
inline void ManageApp::set_cmd(::PS::ManageApp_Command value) {
  assert(::PS::ManageApp_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// required .PS.AppConfig app_config = 2;
inline bool ManageApp::has_app_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ManageApp::set_has_app_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ManageApp::clear_has_app_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ManageApp::clear_app_config() {
  if (app_config_ != NULL) app_config_->::PS::AppConfig::Clear();
  clear_has_app_config();
}
inline const ::PS::AppConfig& ManageApp::app_config() const {
  return app_config_ != NULL ? *app_config_ : *default_instance_->app_config_;
}
inline ::PS::AppConfig* ManageApp::mutable_app_config() {
  set_has_app_config();
  if (app_config_ == NULL) app_config_ = new ::PS::AppConfig;
  return app_config_;
}
inline ::PS::AppConfig* ManageApp::release_app_config() {
  clear_has_app_config();
  ::PS::AppConfig* temp = app_config_;
  app_config_ = NULL;
  return temp;
}
inline void ManageApp::set_allocated_app_config(::PS::AppConfig* app_config) {
  delete app_config_;
  app_config_ = app_config;
  if (app_config) {
    set_has_app_config();
  } else {
    clear_has_app_config();
  }
}

// -------------------------------------------------------------------

// Timestamp

// required string sender = 1;
inline bool Timestamp::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Timestamp::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Timestamp::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Timestamp::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& Timestamp::sender() const {
  return *sender_;
}
inline void Timestamp::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void Timestamp::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void Timestamp::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Timestamp::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* Timestamp::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Timestamp::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 time = 2;
inline bool Timestamp::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Timestamp::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Timestamp::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Timestamp::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 Timestamp::time() const {
  return time_;
}
inline void Timestamp::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// CallSharedPara

// required .PS.CallSharedPara.Command cmd = 1;
inline bool CallSharedPara::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallSharedPara::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallSharedPara::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallSharedPara::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::CallSharedPara_Command CallSharedPara::cmd() const {
  return static_cast< ::PS::CallSharedPara_Command >(cmd_);
}
inline void CallSharedPara::set_cmd(::PS::CallSharedPara_Command value) {
  assert(::PS::CallSharedPara_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional bool insert_key_freq = 3;
inline bool CallSharedPara::has_insert_key_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallSharedPara::set_has_insert_key_freq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallSharedPara::clear_has_insert_key_freq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallSharedPara::clear_insert_key_freq() {
  insert_key_freq_ = false;
  clear_has_insert_key_freq();
}
inline bool CallSharedPara::insert_key_freq() const {
  return insert_key_freq_;
}
inline void CallSharedPara::set_insert_key_freq(bool value) {
  set_has_insert_key_freq();
  insert_key_freq_ = value;
}

// optional int32 query_key_freq = 4;
inline bool CallSharedPara::has_query_key_freq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CallSharedPara::set_has_query_key_freq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CallSharedPara::clear_has_query_key_freq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CallSharedPara::clear_query_key_freq() {
  query_key_freq_ = 0;
  clear_has_query_key_freq();
}
inline ::google::protobuf::int32 CallSharedPara::query_key_freq() const {
  return query_key_freq_;
}
inline void CallSharedPara::set_query_key_freq(::google::protobuf::int32 value) {
  set_has_query_key_freq();
  query_key_freq_ = value;
}

// optional bool insert_key = 5;
inline bool CallSharedPara::has_insert_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CallSharedPara::set_has_insert_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CallSharedPara::clear_has_insert_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CallSharedPara::clear_insert_key() {
  insert_key_ = false;
  clear_has_insert_key();
}
inline bool CallSharedPara::insert_key() const {
  return insert_key_;
}
inline void CallSharedPara::set_insert_key(bool value) {
  set_has_insert_key();
  insert_key_ = value;
}

// optional int32 countmin_n = 6;
inline bool CallSharedPara::has_countmin_n() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CallSharedPara::set_has_countmin_n() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CallSharedPara::clear_has_countmin_n() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CallSharedPara::clear_countmin_n() {
  countmin_n_ = 0;
  clear_has_countmin_n();
}
inline ::google::protobuf::int32 CallSharedPara::countmin_n() const {
  return countmin_n_;
}
inline void CallSharedPara::set_countmin_n(::google::protobuf::int32 value) {
  set_has_countmin_n();
  countmin_n_ = value;
}

// optional int32 countmin_k = 7;
inline bool CallSharedPara::has_countmin_k() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CallSharedPara::set_has_countmin_k() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CallSharedPara::clear_has_countmin_k() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CallSharedPara::clear_countmin_k() {
  countmin_k_ = 0;
  clear_has_countmin_k();
}
inline ::google::protobuf::int32 CallSharedPara::countmin_k() const {
  return countmin_k_;
}
inline void CallSharedPara::set_countmin_k(::google::protobuf::int32 value) {
  set_has_countmin_k();
  countmin_k_ = value;
}

// optional bool replica = 10;
inline bool CallSharedPara::has_replica() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CallSharedPara::set_has_replica() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CallSharedPara::clear_has_replica() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CallSharedPara::clear_replica() {
  replica_ = false;
  clear_has_replica();
}
inline bool CallSharedPara::replica() const {
  return replica_;
}
inline void CallSharedPara::set_replica(bool value) {
  set_has_replica();
  replica_ = value;
}

// repeated .PS.Timestamp backup = 11;
inline int CallSharedPara::backup_size() const {
  return backup_.size();
}
inline void CallSharedPara::clear_backup() {
  backup_.Clear();
}
inline const ::PS::Timestamp& CallSharedPara::backup(int index) const {
  return backup_.Get(index);
}
inline ::PS::Timestamp* CallSharedPara::mutable_backup(int index) {
  return backup_.Mutable(index);
}
inline ::PS::Timestamp* CallSharedPara::add_backup() {
  return backup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::Timestamp >&
CallSharedPara::backup() const {
  return backup_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::Timestamp >*
CallSharedPara::mutable_backup() {
  return &backup_;
}

// -------------------------------------------------------------------

// CallSketch

// required .PS.CallSketch.Command cmd = 1;
inline bool CallSketch::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CallSketch::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CallSketch::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CallSketch::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::CallSketch_Command CallSketch::cmd() const {
  return static_cast< ::PS::CallSketch_Command >(cmd_);
}
inline void CallSketch::set_cmd(::PS::CallSketch_Command value) {
  assert(::PS::CallSketch_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional .PS.PbRange key = 2;
inline bool CallSketch::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CallSketch::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CallSketch::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CallSketch::clear_key() {
  if (key_ != NULL) key_->::PS::PbRange::Clear();
  clear_has_key();
}
inline const ::PS::PbRange& CallSketch::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::PS::PbRange* CallSketch::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::PS::PbRange;
  return key_;
}
inline ::PS::PbRange* CallSketch::release_key() {
  clear_has_key();
  ::PS::PbRange* temp = key_;
  key_ = NULL;
  return temp;
}
inline void CallSketch::set_allocated_key(::PS::PbRange* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// -------------------------------------------------------------------

// SketchResponse

// optional string nodeid = 1;
inline bool SketchResponse::has_nodeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SketchResponse::set_has_nodeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SketchResponse::clear_has_nodeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SketchResponse::clear_nodeid() {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    nodeid_->clear();
  }
  clear_has_nodeid();
}
inline const ::std::string& SketchResponse::nodeid() const {
  return *nodeid_;
}
inline void SketchResponse::set_nodeid(const ::std::string& value) {
  set_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void SketchResponse::set_nodeid(const char* value) {
  set_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(value);
}
inline void SketchResponse::set_nodeid(const char* value, size_t size) {
  set_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    nodeid_ = new ::std::string;
  }
  nodeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SketchResponse::mutable_nodeid() {
  set_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    nodeid_ = new ::std::string;
  }
  return nodeid_;
}
inline ::std::string* SketchResponse::release_nodeid() {
  clear_has_nodeid();
  if (nodeid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nodeid_;
    nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SketchResponse::set_allocated_nodeid(::std::string* nodeid) {
  if (nodeid_ != &::google::protobuf::internal::kEmptyString) {
    delete nodeid_;
  }
  if (nodeid) {
    set_has_nodeid();
    nodeid_ = nodeid;
  } else {
    clear_has_nodeid();
    nodeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double process_time = 2;
inline bool SketchResponse::has_process_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SketchResponse::set_has_process_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SketchResponse::clear_has_process_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SketchResponse::clear_process_time() {
  process_time_ = 0;
  clear_has_process_time();
}
inline double SketchResponse::process_time() const {
  return process_time_;
}
inline void SketchResponse::set_process_time(double value) {
  set_has_process_time();
  process_time_ = value;
}

// optional uint32 payload = 3;
inline bool SketchResponse::has_payload() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SketchResponse::set_has_payload() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SketchResponse::clear_has_payload() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SketchResponse::clear_payload() {
  payload_ = 0u;
  clear_has_payload();
}
inline ::google::protobuf::uint32 SketchResponse::payload() const {
  return payload_;
}
inline void SketchResponse::set_payload(::google::protobuf::uint32 value) {
  set_has_payload();
  payload_ = value;
}

// optional uint32 key = 4;
inline bool SketchResponse::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SketchResponse::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SketchResponse::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SketchResponse::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 SketchResponse::key() const {
  return key_;
}
inline void SketchResponse::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::Task_Type>() {
  return ::PS::Task_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::Task_DataType>() {
  return ::PS::Task_DataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::ManageNode_Command>() {
  return ::PS::ManageNode_Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::ManageApp_Command>() {
  return ::PS::ManageApp_Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::CallSharedPara_Command>() {
  return ::PS::CallSharedPara_Command_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::CallSketch_Command>() {
  return ::PS::CallSketch_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftask_2eproto__INCLUDED

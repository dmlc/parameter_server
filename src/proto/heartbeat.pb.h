// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/heartbeat.proto

#ifndef PROTOBUF_proto_2fheartbeat_2eproto__INCLUDED
#define PROTOBUF_proto_2fheartbeat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fheartbeat_2eproto();
void protobuf_AssignDesc_proto_2fheartbeat_2eproto();
void protobuf_ShutdownFile_proto_2fheartbeat_2eproto();

class HeartbeatReport;

// ===================================================================

class HeartbeatReport : public ::google::protobuf::Message {
 public:
  HeartbeatReport();
  virtual ~HeartbeatReport();

  HeartbeatReport(const HeartbeatReport& from);

  inline HeartbeatReport& operator=(const HeartbeatReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatReport& default_instance();

  void Swap(HeartbeatReport* other);

  // implements Message ----------------------------------------------

  HeartbeatReport* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatReport& from);
  void MergeFrom(const HeartbeatReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 task_id = 1 [default = 0];
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 task_id() const;
  inline void set_task_id(::google::protobuf::int32 value);

  // optional string hostname = 14;
  inline bool has_hostname() const;
  inline void clear_hostname();
  static const int kHostnameFieldNumber = 14;
  inline const ::std::string& hostname() const;
  inline void set_hostname(const ::std::string& value);
  inline void set_hostname(const char* value);
  inline void set_hostname(const char* value, size_t size);
  inline ::std::string* mutable_hostname();
  inline ::std::string* release_hostname();
  inline void set_allocated_hostname(::std::string* hostname);

  // optional uint32 seconds_since_epoch = 2;
  inline bool has_seconds_since_epoch() const;
  inline void clear_seconds_since_epoch();
  static const int kSecondsSinceEpochFieldNumber = 2;
  inline ::google::protobuf::uint32 seconds_since_epoch() const;
  inline void set_seconds_since_epoch(::google::protobuf::uint32 value);

  // optional uint32 total_time_milli = 13;
  inline bool has_total_time_milli() const;
  inline void clear_total_time_milli();
  static const int kTotalTimeMilliFieldNumber = 13;
  inline ::google::protobuf::uint32 total_time_milli() const;
  inline void set_total_time_milli(::google::protobuf::uint32 value);

  // optional uint32 busy_time_milli = 3;
  inline bool has_busy_time_milli() const;
  inline void clear_busy_time_milli();
  static const int kBusyTimeMilliFieldNumber = 3;
  inline ::google::protobuf::uint32 busy_time_milli() const;
  inline void set_busy_time_milli(::google::protobuf::uint32 value);

  // optional uint32 net_in_mb = 4;
  inline bool has_net_in_mb() const;
  inline void clear_net_in_mb();
  static const int kNetInMbFieldNumber = 4;
  inline ::google::protobuf::uint32 net_in_mb() const;
  inline void set_net_in_mb(::google::protobuf::uint32 value);

  // optional uint32 net_out_mb = 5;
  inline bool has_net_out_mb() const;
  inline void clear_net_out_mb();
  static const int kNetOutMbFieldNumber = 5;
  inline ::google::protobuf::uint32 net_out_mb() const;
  inline void set_net_out_mb(::google::protobuf::uint32 value);

  // optional uint32 process_cpu_usage = 6;
  inline bool has_process_cpu_usage() const;
  inline void clear_process_cpu_usage();
  static const int kProcessCpuUsageFieldNumber = 6;
  inline ::google::protobuf::uint32 process_cpu_usage() const;
  inline void set_process_cpu_usage(::google::protobuf::uint32 value);

  // optional uint32 host_cpu_usage = 7;
  inline bool has_host_cpu_usage() const;
  inline void clear_host_cpu_usage();
  static const int kHostCpuUsageFieldNumber = 7;
  inline ::google::protobuf::uint32 host_cpu_usage() const;
  inline void set_host_cpu_usage(::google::protobuf::uint32 value);

  // optional uint32 process_rss_mb = 8;
  inline bool has_process_rss_mb() const;
  inline void clear_process_rss_mb();
  static const int kProcessRssMbFieldNumber = 8;
  inline ::google::protobuf::uint32 process_rss_mb() const;
  inline void set_process_rss_mb(::google::protobuf::uint32 value);

  // optional uint32 process_virt_mb = 9;
  inline bool has_process_virt_mb() const;
  inline void clear_process_virt_mb();
  static const int kProcessVirtMbFieldNumber = 9;
  inline ::google::protobuf::uint32 process_virt_mb() const;
  inline void set_process_virt_mb(::google::protobuf::uint32 value);

  // optional uint32 host_in_use_gb = 10;
  inline bool has_host_in_use_gb() const;
  inline void clear_host_in_use_gb();
  static const int kHostInUseGbFieldNumber = 10;
  inline ::google::protobuf::uint32 host_in_use_gb() const;
  inline void set_host_in_use_gb(::google::protobuf::uint32 value);

  // optional uint32 host_in_use_percentage = 15;
  inline bool has_host_in_use_percentage() const;
  inline void clear_host_in_use_percentage();
  static const int kHostInUsePercentageFieldNumber = 15;
  inline ::google::protobuf::uint32 host_in_use_percentage() const;
  inline void set_host_in_use_percentage(::google::protobuf::uint32 value);

  // optional uint32 host_net_in_bw = 11;
  inline bool has_host_net_in_bw() const;
  inline void clear_host_net_in_bw();
  static const int kHostNetInBwFieldNumber = 11;
  inline ::google::protobuf::uint32 host_net_in_bw() const;
  inline void set_host_net_in_bw(::google::protobuf::uint32 value);

  // optional uint32 host_net_out_bw = 12;
  inline bool has_host_net_out_bw() const;
  inline void clear_host_net_out_bw();
  static const int kHostNetOutBwFieldNumber = 12;
  inline ::google::protobuf::uint32 host_net_out_bw() const;
  inline void set_host_net_out_bw(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PS.HeartbeatReport)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_seconds_since_epoch();
  inline void clear_has_seconds_since_epoch();
  inline void set_has_total_time_milli();
  inline void clear_has_total_time_milli();
  inline void set_has_busy_time_milli();
  inline void clear_has_busy_time_milli();
  inline void set_has_net_in_mb();
  inline void clear_has_net_in_mb();
  inline void set_has_net_out_mb();
  inline void clear_has_net_out_mb();
  inline void set_has_process_cpu_usage();
  inline void clear_has_process_cpu_usage();
  inline void set_has_host_cpu_usage();
  inline void clear_has_host_cpu_usage();
  inline void set_has_process_rss_mb();
  inline void clear_has_process_rss_mb();
  inline void set_has_process_virt_mb();
  inline void clear_has_process_virt_mb();
  inline void set_has_host_in_use_gb();
  inline void clear_has_host_in_use_gb();
  inline void set_has_host_in_use_percentage();
  inline void clear_has_host_in_use_percentage();
  inline void set_has_host_net_in_bw();
  inline void clear_has_host_net_in_bw();
  inline void set_has_host_net_out_bw();
  inline void clear_has_host_net_out_bw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* hostname_;
  ::google::protobuf::int32 task_id_;
  ::google::protobuf::uint32 seconds_since_epoch_;
  ::google::protobuf::uint32 total_time_milli_;
  ::google::protobuf::uint32 busy_time_milli_;
  ::google::protobuf::uint32 net_in_mb_;
  ::google::protobuf::uint32 net_out_mb_;
  ::google::protobuf::uint32 process_cpu_usage_;
  ::google::protobuf::uint32 host_cpu_usage_;
  ::google::protobuf::uint32 process_rss_mb_;
  ::google::protobuf::uint32 process_virt_mb_;
  ::google::protobuf::uint32 host_in_use_gb_;
  ::google::protobuf::uint32 host_in_use_percentage_;
  ::google::protobuf::uint32 host_net_in_bw_;
  ::google::protobuf::uint32 host_net_out_bw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fheartbeat_2eproto();
  friend void protobuf_AssignDesc_proto_2fheartbeat_2eproto();
  friend void protobuf_ShutdownFile_proto_2fheartbeat_2eproto();

  void InitAsDefaultInstance();
  static HeartbeatReport* default_instance_;
};
// ===================================================================


// ===================================================================

// HeartbeatReport

// optional int32 task_id = 1 [default = 0];
inline bool HeartbeatReport::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeartbeatReport::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeartbeatReport::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeartbeatReport::clear_task_id() {
  task_id_ = 0;
  clear_has_task_id();
}
inline ::google::protobuf::int32 HeartbeatReport::task_id() const {
  return task_id_;
}
inline void HeartbeatReport::set_task_id(::google::protobuf::int32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional string hostname = 14;
inline bool HeartbeatReport::has_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeartbeatReport::set_has_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeartbeatReport::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeartbeatReport::clear_hostname() {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    hostname_->clear();
  }
  clear_has_hostname();
}
inline const ::std::string& HeartbeatReport::hostname() const {
  return *hostname_;
}
inline void HeartbeatReport::set_hostname(const ::std::string& value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void HeartbeatReport::set_hostname(const char* value) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(value);
}
inline void HeartbeatReport::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HeartbeatReport::mutable_hostname() {
  set_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    hostname_ = new ::std::string;
  }
  return hostname_;
}
inline ::std::string* HeartbeatReport::release_hostname() {
  clear_has_hostname();
  if (hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hostname_;
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HeartbeatReport::set_allocated_hostname(::std::string* hostname) {
  if (hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete hostname_;
  }
  if (hostname) {
    set_has_hostname();
    hostname_ = hostname;
  } else {
    clear_has_hostname();
    hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 seconds_since_epoch = 2;
inline bool HeartbeatReport::has_seconds_since_epoch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeartbeatReport::set_has_seconds_since_epoch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeartbeatReport::clear_has_seconds_since_epoch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeartbeatReport::clear_seconds_since_epoch() {
  seconds_since_epoch_ = 0u;
  clear_has_seconds_since_epoch();
}
inline ::google::protobuf::uint32 HeartbeatReport::seconds_since_epoch() const {
  return seconds_since_epoch_;
}
inline void HeartbeatReport::set_seconds_since_epoch(::google::protobuf::uint32 value) {
  set_has_seconds_since_epoch();
  seconds_since_epoch_ = value;
}

// optional uint32 total_time_milli = 13;
inline bool HeartbeatReport::has_total_time_milli() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeartbeatReport::set_has_total_time_milli() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeartbeatReport::clear_has_total_time_milli() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeartbeatReport::clear_total_time_milli() {
  total_time_milli_ = 0u;
  clear_has_total_time_milli();
}
inline ::google::protobuf::uint32 HeartbeatReport::total_time_milli() const {
  return total_time_milli_;
}
inline void HeartbeatReport::set_total_time_milli(::google::protobuf::uint32 value) {
  set_has_total_time_milli();
  total_time_milli_ = value;
}

// optional uint32 busy_time_milli = 3;
inline bool HeartbeatReport::has_busy_time_milli() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeartbeatReport::set_has_busy_time_milli() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeartbeatReport::clear_has_busy_time_milli() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeartbeatReport::clear_busy_time_milli() {
  busy_time_milli_ = 0u;
  clear_has_busy_time_milli();
}
inline ::google::protobuf::uint32 HeartbeatReport::busy_time_milli() const {
  return busy_time_milli_;
}
inline void HeartbeatReport::set_busy_time_milli(::google::protobuf::uint32 value) {
  set_has_busy_time_milli();
  busy_time_milli_ = value;
}

// optional uint32 net_in_mb = 4;
inline bool HeartbeatReport::has_net_in_mb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HeartbeatReport::set_has_net_in_mb() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HeartbeatReport::clear_has_net_in_mb() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HeartbeatReport::clear_net_in_mb() {
  net_in_mb_ = 0u;
  clear_has_net_in_mb();
}
inline ::google::protobuf::uint32 HeartbeatReport::net_in_mb() const {
  return net_in_mb_;
}
inline void HeartbeatReport::set_net_in_mb(::google::protobuf::uint32 value) {
  set_has_net_in_mb();
  net_in_mb_ = value;
}

// optional uint32 net_out_mb = 5;
inline bool HeartbeatReport::has_net_out_mb() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void HeartbeatReport::set_has_net_out_mb() {
  _has_bits_[0] |= 0x00000040u;
}
inline void HeartbeatReport::clear_has_net_out_mb() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void HeartbeatReport::clear_net_out_mb() {
  net_out_mb_ = 0u;
  clear_has_net_out_mb();
}
inline ::google::protobuf::uint32 HeartbeatReport::net_out_mb() const {
  return net_out_mb_;
}
inline void HeartbeatReport::set_net_out_mb(::google::protobuf::uint32 value) {
  set_has_net_out_mb();
  net_out_mb_ = value;
}

// optional uint32 process_cpu_usage = 6;
inline bool HeartbeatReport::has_process_cpu_usage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void HeartbeatReport::set_has_process_cpu_usage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void HeartbeatReport::clear_has_process_cpu_usage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void HeartbeatReport::clear_process_cpu_usage() {
  process_cpu_usage_ = 0u;
  clear_has_process_cpu_usage();
}
inline ::google::protobuf::uint32 HeartbeatReport::process_cpu_usage() const {
  return process_cpu_usage_;
}
inline void HeartbeatReport::set_process_cpu_usage(::google::protobuf::uint32 value) {
  set_has_process_cpu_usage();
  process_cpu_usage_ = value;
}

// optional uint32 host_cpu_usage = 7;
inline bool HeartbeatReport::has_host_cpu_usage() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void HeartbeatReport::set_has_host_cpu_usage() {
  _has_bits_[0] |= 0x00000100u;
}
inline void HeartbeatReport::clear_has_host_cpu_usage() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void HeartbeatReport::clear_host_cpu_usage() {
  host_cpu_usage_ = 0u;
  clear_has_host_cpu_usage();
}
inline ::google::protobuf::uint32 HeartbeatReport::host_cpu_usage() const {
  return host_cpu_usage_;
}
inline void HeartbeatReport::set_host_cpu_usage(::google::protobuf::uint32 value) {
  set_has_host_cpu_usage();
  host_cpu_usage_ = value;
}

// optional uint32 process_rss_mb = 8;
inline bool HeartbeatReport::has_process_rss_mb() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void HeartbeatReport::set_has_process_rss_mb() {
  _has_bits_[0] |= 0x00000200u;
}
inline void HeartbeatReport::clear_has_process_rss_mb() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void HeartbeatReport::clear_process_rss_mb() {
  process_rss_mb_ = 0u;
  clear_has_process_rss_mb();
}
inline ::google::protobuf::uint32 HeartbeatReport::process_rss_mb() const {
  return process_rss_mb_;
}
inline void HeartbeatReport::set_process_rss_mb(::google::protobuf::uint32 value) {
  set_has_process_rss_mb();
  process_rss_mb_ = value;
}

// optional uint32 process_virt_mb = 9;
inline bool HeartbeatReport::has_process_virt_mb() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void HeartbeatReport::set_has_process_virt_mb() {
  _has_bits_[0] |= 0x00000400u;
}
inline void HeartbeatReport::clear_has_process_virt_mb() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void HeartbeatReport::clear_process_virt_mb() {
  process_virt_mb_ = 0u;
  clear_has_process_virt_mb();
}
inline ::google::protobuf::uint32 HeartbeatReport::process_virt_mb() const {
  return process_virt_mb_;
}
inline void HeartbeatReport::set_process_virt_mb(::google::protobuf::uint32 value) {
  set_has_process_virt_mb();
  process_virt_mb_ = value;
}

// optional uint32 host_in_use_gb = 10;
inline bool HeartbeatReport::has_host_in_use_gb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void HeartbeatReport::set_has_host_in_use_gb() {
  _has_bits_[0] |= 0x00000800u;
}
inline void HeartbeatReport::clear_has_host_in_use_gb() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void HeartbeatReport::clear_host_in_use_gb() {
  host_in_use_gb_ = 0u;
  clear_has_host_in_use_gb();
}
inline ::google::protobuf::uint32 HeartbeatReport::host_in_use_gb() const {
  return host_in_use_gb_;
}
inline void HeartbeatReport::set_host_in_use_gb(::google::protobuf::uint32 value) {
  set_has_host_in_use_gb();
  host_in_use_gb_ = value;
}

// optional uint32 host_in_use_percentage = 15;
inline bool HeartbeatReport::has_host_in_use_percentage() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void HeartbeatReport::set_has_host_in_use_percentage() {
  _has_bits_[0] |= 0x00001000u;
}
inline void HeartbeatReport::clear_has_host_in_use_percentage() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void HeartbeatReport::clear_host_in_use_percentage() {
  host_in_use_percentage_ = 0u;
  clear_has_host_in_use_percentage();
}
inline ::google::protobuf::uint32 HeartbeatReport::host_in_use_percentage() const {
  return host_in_use_percentage_;
}
inline void HeartbeatReport::set_host_in_use_percentage(::google::protobuf::uint32 value) {
  set_has_host_in_use_percentage();
  host_in_use_percentage_ = value;
}

// optional uint32 host_net_in_bw = 11;
inline bool HeartbeatReport::has_host_net_in_bw() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void HeartbeatReport::set_has_host_net_in_bw() {
  _has_bits_[0] |= 0x00002000u;
}
inline void HeartbeatReport::clear_has_host_net_in_bw() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void HeartbeatReport::clear_host_net_in_bw() {
  host_net_in_bw_ = 0u;
  clear_has_host_net_in_bw();
}
inline ::google::protobuf::uint32 HeartbeatReport::host_net_in_bw() const {
  return host_net_in_bw_;
}
inline void HeartbeatReport::set_host_net_in_bw(::google::protobuf::uint32 value) {
  set_has_host_net_in_bw();
  host_net_in_bw_ = value;
}

// optional uint32 host_net_out_bw = 12;
inline bool HeartbeatReport::has_host_net_out_bw() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void HeartbeatReport::set_has_host_net_out_bw() {
  _has_bits_[0] |= 0x00004000u;
}
inline void HeartbeatReport::clear_has_host_net_out_bw() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void HeartbeatReport::clear_host_net_out_bw() {
  host_net_out_bw_ = 0u;
  clear_has_host_net_out_bw();
}
inline ::google::protobuf::uint32 HeartbeatReport::host_net_out_bw() const {
  return host_net_out_bw_;
}
inline void HeartbeatReport::set_host_net_out_bw(::google::protobuf::uint32 value) {
  set_has_host_net_out_bw();
  host_net_out_bw_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fheartbeat_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/linear_method/proto/linear.proto

#ifndef PROTOBUF_app_2flinear_5fmethod_2fproto_2flinear_2eproto__INCLUDED
#define PROTOBUF_app_2flinear_5fmethod_2fproto_2flinear_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "data/proto/data.pb.h"
#include "learner/proto/bcd.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {
namespace LM {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
void protobuf_AssignDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
void protobuf_ShutdownFile_app_2flinear_5fmethod_2fproto_2flinear_2eproto();

class Config;
class SGDConfig;
class LossConfig;
class PenaltyConfig;
class LearningRateConfig;

enum SGDConfig_Algo {
  SGDConfig_Algo_STANDARD = 1,
  SGDConfig_Algo_FTRL = 2
};
bool SGDConfig_Algo_IsValid(int value);
const SGDConfig_Algo SGDConfig_Algo_Algo_MIN = SGDConfig_Algo_STANDARD;
const SGDConfig_Algo SGDConfig_Algo_Algo_MAX = SGDConfig_Algo_FTRL;
const int SGDConfig_Algo_Algo_ARRAYSIZE = SGDConfig_Algo_Algo_MAX + 1;

const ::google::protobuf::EnumDescriptor* SGDConfig_Algo_descriptor();
inline const ::std::string& SGDConfig_Algo_Name(SGDConfig_Algo value) {
  return ::google::protobuf::internal::NameOfEnum(
    SGDConfig_Algo_descriptor(), value);
}
inline bool SGDConfig_Algo_Parse(
    const ::std::string& name, SGDConfig_Algo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SGDConfig_Algo>(
    SGDConfig_Algo_descriptor(), name, value);
}
enum LossConfig_Type {
  LossConfig_Type_SQUARE = 1,
  LossConfig_Type_LOGIT = 2,
  LossConfig_Type_HINGE = 3,
  LossConfig_Type_SQUARE_HINGE = 4
};
bool LossConfig_Type_IsValid(int value);
const LossConfig_Type LossConfig_Type_Type_MIN = LossConfig_Type_SQUARE;
const LossConfig_Type LossConfig_Type_Type_MAX = LossConfig_Type_SQUARE_HINGE;
const int LossConfig_Type_Type_ARRAYSIZE = LossConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossConfig_Type_descriptor();
inline const ::std::string& LossConfig_Type_Name(LossConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossConfig_Type_descriptor(), value);
}
inline bool LossConfig_Type_Parse(
    const ::std::string& name, LossConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossConfig_Type>(
    LossConfig_Type_descriptor(), name, value);
}
enum PenaltyConfig_Type {
  PenaltyConfig_Type_L1 = 1,
  PenaltyConfig_Type_L2 = 2
};
bool PenaltyConfig_Type_IsValid(int value);
const PenaltyConfig_Type PenaltyConfig_Type_Type_MIN = PenaltyConfig_Type_L1;
const PenaltyConfig_Type PenaltyConfig_Type_Type_MAX = PenaltyConfig_Type_L2;
const int PenaltyConfig_Type_Type_ARRAYSIZE = PenaltyConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PenaltyConfig_Type_descriptor();
inline const ::std::string& PenaltyConfig_Type_Name(PenaltyConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PenaltyConfig_Type_descriptor(), value);
}
inline bool PenaltyConfig_Type_Parse(
    const ::std::string& name, PenaltyConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PenaltyConfig_Type>(
    PenaltyConfig_Type_descriptor(), name, value);
}
enum LearningRateConfig_Type {
  LearningRateConfig_Type_CONSTANT = 1,
  LearningRateConfig_Type_DECAY = 2
};
bool LearningRateConfig_Type_IsValid(int value);
const LearningRateConfig_Type LearningRateConfig_Type_Type_MIN = LearningRateConfig_Type_CONSTANT;
const LearningRateConfig_Type LearningRateConfig_Type_Type_MAX = LearningRateConfig_Type_DECAY;
const int LearningRateConfig_Type_Type_ARRAYSIZE = LearningRateConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LearningRateConfig_Type_descriptor();
inline const ::std::string& LearningRateConfig_Type_Name(LearningRateConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LearningRateConfig_Type_descriptor(), value);
}
inline bool LearningRateConfig_Type_Parse(
    const ::std::string& name, LearningRateConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LearningRateConfig_Type>(
    LearningRateConfig_Type_descriptor(), name, value);
}
// ===================================================================

class Config : public ::google::protobuf::Message {
 public:
  Config();
  virtual ~Config();

  Config(const Config& from);

  inline Config& operator=(const Config& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Config& default_instance();

  void Swap(Config* other);

  // implements Message ----------------------------------------------

  Config* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Config& from);
  void MergeFrom(const Config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PS.DataConfig training_data = 1;
  inline bool has_training_data() const;
  inline void clear_training_data();
  static const int kTrainingDataFieldNumber = 1;
  inline const ::PS::DataConfig& training_data() const;
  inline ::PS::DataConfig* mutable_training_data();
  inline ::PS::DataConfig* release_training_data();
  inline void set_allocated_training_data(::PS::DataConfig* training_data);

  // optional .PS.DataConfig validation_data = 2;
  inline bool has_validation_data() const;
  inline void clear_validation_data();
  static const int kValidationDataFieldNumber = 2;
  inline const ::PS::DataConfig& validation_data() const;
  inline ::PS::DataConfig* mutable_validation_data();
  inline ::PS::DataConfig* release_validation_data();
  inline void set_allocated_validation_data(::PS::DataConfig* validation_data);

  // optional .PS.DataConfig model_output = 4;
  inline bool has_model_output() const;
  inline void clear_model_output();
  static const int kModelOutputFieldNumber = 4;
  inline const ::PS::DataConfig& model_output() const;
  inline ::PS::DataConfig* mutable_model_output();
  inline ::PS::DataConfig* release_model_output();
  inline void set_allocated_model_output(::PS::DataConfig* model_output);

  // optional .PS.DataConfig model_input = 5;
  inline bool has_model_input() const;
  inline void clear_model_input();
  static const int kModelInputFieldNumber = 5;
  inline const ::PS::DataConfig& model_input() const;
  inline ::PS::DataConfig* mutable_model_input();
  inline ::PS::DataConfig* release_model_input();
  inline void set_allocated_model_input(::PS::DataConfig* model_input);

  // optional .PS.LM.LossConfig loss = 10;
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 10;
  inline const ::PS::LM::LossConfig& loss() const;
  inline ::PS::LM::LossConfig* mutable_loss();
  inline ::PS::LM::LossConfig* release_loss();
  inline void set_allocated_loss(::PS::LM::LossConfig* loss);

  // optional .PS.LM.PenaltyConfig penalty = 11;
  inline bool has_penalty() const;
  inline void clear_penalty();
  static const int kPenaltyFieldNumber = 11;
  inline const ::PS::LM::PenaltyConfig& penalty() const;
  inline ::PS::LM::PenaltyConfig* mutable_penalty();
  inline ::PS::LM::PenaltyConfig* release_penalty();
  inline void set_allocated_penalty(::PS::LM::PenaltyConfig* penalty);

  // optional .PS.LM.LearningRateConfig learning_rate = 12;
  inline bool has_learning_rate() const;
  inline void clear_learning_rate();
  static const int kLearningRateFieldNumber = 12;
  inline const ::PS::LM::LearningRateConfig& learning_rate() const;
  inline ::PS::LM::LearningRateConfig* mutable_learning_rate();
  inline ::PS::LM::LearningRateConfig* release_learning_rate();
  inline void set_allocated_learning_rate(::PS::LM::LearningRateConfig* learning_rate);

  // optional .PS.LM.SGDConfig async_sgd = 17;
  inline bool has_async_sgd() const;
  inline void clear_async_sgd();
  static const int kAsyncSgdFieldNumber = 17;
  inline const ::PS::LM::SGDConfig& async_sgd() const;
  inline ::PS::LM::SGDConfig* mutable_async_sgd();
  inline ::PS::LM::SGDConfig* release_async_sgd();
  inline void set_allocated_async_sgd(::PS::LM::SGDConfig* async_sgd);

  // optional .PS.BCDConfig darlin = 15;
  inline bool has_darlin() const;
  inline void clear_darlin();
  static const int kDarlinFieldNumber = 15;
  inline const ::PS::BCDConfig& darlin() const;
  inline ::PS::BCDConfig* mutable_darlin();
  inline ::PS::BCDConfig* release_darlin();
  inline void set_allocated_darlin(::PS::BCDConfig* darlin);

  // @@protoc_insertion_point(class_scope:PS.LM.Config)
 private:
  inline void set_has_training_data();
  inline void clear_has_training_data();
  inline void set_has_validation_data();
  inline void clear_has_validation_data();
  inline void set_has_model_output();
  inline void clear_has_model_output();
  inline void set_has_model_input();
  inline void clear_has_model_input();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_penalty();
  inline void clear_has_penalty();
  inline void set_has_learning_rate();
  inline void clear_has_learning_rate();
  inline void set_has_async_sgd();
  inline void clear_has_async_sgd();
  inline void set_has_darlin();
  inline void clear_has_darlin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::DataConfig* training_data_;
  ::PS::DataConfig* validation_data_;
  ::PS::DataConfig* model_output_;
  ::PS::DataConfig* model_input_;
  ::PS::LM::LossConfig* loss_;
  ::PS::LM::PenaltyConfig* penalty_;
  ::PS::LM::LearningRateConfig* learning_rate_;
  ::PS::LM::SGDConfig* async_sgd_;
  ::PS::BCDConfig* darlin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_AssignDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_ShutdownFile_app_2flinear_5fmethod_2fproto_2flinear_2eproto();

  void InitAsDefaultInstance();
  static Config* default_instance_;
};
// -------------------------------------------------------------------

class SGDConfig : public ::google::protobuf::Message {
 public:
  SGDConfig();
  virtual ~SGDConfig();

  SGDConfig(const SGDConfig& from);

  inline SGDConfig& operator=(const SGDConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SGDConfig& default_instance();

  void Swap(SGDConfig* other);

  // implements Message ----------------------------------------------

  SGDConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SGDConfig& from);
  void MergeFrom(const SGDConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SGDConfig_Algo Algo;
  static const Algo STANDARD = SGDConfig_Algo_STANDARD;
  static const Algo FTRL = SGDConfig_Algo_FTRL;
  static inline bool Algo_IsValid(int value) {
    return SGDConfig_Algo_IsValid(value);
  }
  static const Algo Algo_MIN =
    SGDConfig_Algo_Algo_MIN;
  static const Algo Algo_MAX =
    SGDConfig_Algo_Algo_MAX;
  static const int Algo_ARRAYSIZE =
    SGDConfig_Algo_Algo_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Algo_descriptor() {
    return SGDConfig_Algo_descriptor();
  }
  static inline const ::std::string& Algo_Name(Algo value) {
    return SGDConfig_Algo_Name(value);
  }
  static inline bool Algo_Parse(const ::std::string& name,
      Algo* value) {
    return SGDConfig_Algo_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.LM.SGDConfig.Algo algo = 1;
  inline bool has_algo() const;
  inline void clear_algo();
  static const int kAlgoFieldNumber = 1;
  inline ::PS::LM::SGDConfig_Algo algo() const;
  inline void set_algo(::PS::LM::SGDConfig_Algo value);

  // optional int32 minibatch = 2 [default = 1000];
  inline bool has_minibatch() const;
  inline void clear_minibatch();
  static const int kMinibatchFieldNumber = 2;
  inline ::google::protobuf::int32 minibatch() const;
  inline void set_minibatch(::google::protobuf::int32 value);

  // optional int32 data_buf = 12 [default = 100];
  inline bool has_data_buf() const;
  inline void clear_data_buf();
  static const int kDataBufFieldNumber = 12;
  inline ::google::protobuf::int32 data_buf() const;
  inline void set_data_buf(::google::protobuf::int32 value);

  // optional bool ada_grad = 5 [default = true];
  inline bool has_ada_grad() const;
  inline void clear_ada_grad();
  static const int kAdaGradFieldNumber = 5;
  inline bool ada_grad() const;
  inline void set_ada_grad(bool value);

  // optional int32 max_delay = 4 [default = 0];
  inline bool has_max_delay() const;
  inline void clear_max_delay();
  static const int kMaxDelayFieldNumber = 4;
  inline ::google::protobuf::int32 max_delay() const;
  inline void set_max_delay(::google::protobuf::int32 value);

  // optional int32 num_data_pass = 11 [default = 1];
  inline bool has_num_data_pass() const;
  inline void clear_num_data_pass();
  static const int kNumDataPassFieldNumber = 11;
  inline ::google::protobuf::int32 num_data_pass() const;
  inline void set_num_data_pass(::google::protobuf::int32 value);

  // optional int32 report_interval = 3 [default = 1];
  inline bool has_report_interval() const;
  inline void clear_report_interval();
  static const int kReportIntervalFieldNumber = 3;
  inline ::google::protobuf::int32 report_interval() const;
  inline void set_report_interval(::google::protobuf::int32 value);

  // optional int32 tail_feature_freq = 6 [default = 0];
  inline bool has_tail_feature_freq() const;
  inline void clear_tail_feature_freq();
  static const int kTailFeatureFreqFieldNumber = 6;
  inline ::google::protobuf::int32 tail_feature_freq() const;
  inline void set_tail_feature_freq(::google::protobuf::int32 value);

  // optional int32 countmin_k = 7 [default = 2];
  inline bool has_countmin_k() const;
  inline void clear_countmin_k();
  static const int kCountminKFieldNumber = 7;
  inline ::google::protobuf::int32 countmin_k() const;
  inline void set_countmin_k(::google::protobuf::int32 value);

  // optional float countmin_n = 8 [default = 1e+07];
  inline bool has_countmin_n() const;
  inline void clear_countmin_n();
  static const int kCountminNFieldNumber = 8;
  inline float countmin_n() const;
  inline void set_countmin_n(float value);

  // @@protoc_insertion_point(class_scope:PS.LM.SGDConfig)
 private:
  inline void set_has_algo();
  inline void clear_has_algo();
  inline void set_has_minibatch();
  inline void clear_has_minibatch();
  inline void set_has_data_buf();
  inline void clear_has_data_buf();
  inline void set_has_ada_grad();
  inline void clear_has_ada_grad();
  inline void set_has_max_delay();
  inline void clear_has_max_delay();
  inline void set_has_num_data_pass();
  inline void clear_has_num_data_pass();
  inline void set_has_report_interval();
  inline void clear_has_report_interval();
  inline void set_has_tail_feature_freq();
  inline void clear_has_tail_feature_freq();
  inline void set_has_countmin_k();
  inline void clear_has_countmin_k();
  inline void set_has_countmin_n();
  inline void clear_has_countmin_n();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int algo_;
  ::google::protobuf::int32 minibatch_;
  ::google::protobuf::int32 data_buf_;
  bool ada_grad_;
  ::google::protobuf::int32 max_delay_;
  ::google::protobuf::int32 num_data_pass_;
  ::google::protobuf::int32 report_interval_;
  ::google::protobuf::int32 tail_feature_freq_;
  ::google::protobuf::int32 countmin_k_;
  float countmin_n_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_AssignDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_ShutdownFile_app_2flinear_5fmethod_2fproto_2flinear_2eproto();

  void InitAsDefaultInstance();
  static SGDConfig* default_instance_;
};
// -------------------------------------------------------------------

class LossConfig : public ::google::protobuf::Message {
 public:
  LossConfig();
  virtual ~LossConfig();

  LossConfig(const LossConfig& from);

  inline LossConfig& operator=(const LossConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossConfig& default_instance();

  void Swap(LossConfig* other);

  // implements Message ----------------------------------------------

  LossConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossConfig& from);
  void MergeFrom(const LossConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LossConfig_Type Type;
  static const Type SQUARE = LossConfig_Type_SQUARE;
  static const Type LOGIT = LossConfig_Type_LOGIT;
  static const Type HINGE = LossConfig_Type_HINGE;
  static const Type SQUARE_HINGE = LossConfig_Type_SQUARE_HINGE;
  static inline bool Type_IsValid(int value) {
    return LossConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LossConfig_Type_Type_MIN;
  static const Type Type_MAX =
    LossConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LossConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LossConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LossConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LossConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.LM.LossConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::LM::LossConfig_Type type() const;
  inline void set_type(::PS::LM::LossConfig_Type value);

  // @@protoc_insertion_point(class_scope:PS.LM.LossConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_AssignDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_ShutdownFile_app_2flinear_5fmethod_2fproto_2flinear_2eproto();

  void InitAsDefaultInstance();
  static LossConfig* default_instance_;
};
// -------------------------------------------------------------------

class PenaltyConfig : public ::google::protobuf::Message {
 public:
  PenaltyConfig();
  virtual ~PenaltyConfig();

  PenaltyConfig(const PenaltyConfig& from);

  inline PenaltyConfig& operator=(const PenaltyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PenaltyConfig& default_instance();

  void Swap(PenaltyConfig* other);

  // implements Message ----------------------------------------------

  PenaltyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PenaltyConfig& from);
  void MergeFrom(const PenaltyConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PenaltyConfig_Type Type;
  static const Type L1 = PenaltyConfig_Type_L1;
  static const Type L2 = PenaltyConfig_Type_L2;
  static inline bool Type_IsValid(int value) {
    return PenaltyConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PenaltyConfig_Type_Type_MIN;
  static const Type Type_MAX =
    PenaltyConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PenaltyConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PenaltyConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PenaltyConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PenaltyConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.LM.PenaltyConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::LM::PenaltyConfig_Type type() const;
  inline void set_type(::PS::LM::PenaltyConfig_Type value);

  // repeated double lambda = 2;
  inline int lambda_size() const;
  inline void clear_lambda();
  static const int kLambdaFieldNumber = 2;
  inline double lambda(int index) const;
  inline void set_lambda(int index, double value);
  inline void add_lambda(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      lambda() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_lambda();

  // @@protoc_insertion_point(class_scope:PS.LM.PenaltyConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< double > lambda_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_AssignDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_ShutdownFile_app_2flinear_5fmethod_2fproto_2flinear_2eproto();

  void InitAsDefaultInstance();
  static PenaltyConfig* default_instance_;
};
// -------------------------------------------------------------------

class LearningRateConfig : public ::google::protobuf::Message {
 public:
  LearningRateConfig();
  virtual ~LearningRateConfig();

  LearningRateConfig(const LearningRateConfig& from);

  inline LearningRateConfig& operator=(const LearningRateConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LearningRateConfig& default_instance();

  void Swap(LearningRateConfig* other);

  // implements Message ----------------------------------------------

  LearningRateConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LearningRateConfig& from);
  void MergeFrom(const LearningRateConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LearningRateConfig_Type Type;
  static const Type CONSTANT = LearningRateConfig_Type_CONSTANT;
  static const Type DECAY = LearningRateConfig_Type_DECAY;
  static inline bool Type_IsValid(int value) {
    return LearningRateConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LearningRateConfig_Type_Type_MIN;
  static const Type Type_MAX =
    LearningRateConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LearningRateConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LearningRateConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LearningRateConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LearningRateConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PS.LM.LearningRateConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PS::LM::LearningRateConfig_Type type() const;
  inline void set_type(::PS::LM::LearningRateConfig_Type value);

  // optional double alpha = 2;
  inline bool has_alpha() const;
  inline void clear_alpha();
  static const int kAlphaFieldNumber = 2;
  inline double alpha() const;
  inline void set_alpha(double value);

  // optional double beta = 3;
  inline bool has_beta() const;
  inline void clear_beta();
  static const int kBetaFieldNumber = 3;
  inline double beta() const;
  inline void set_beta(double value);

  // @@protoc_insertion_point(class_scope:PS.LM.LearningRateConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_alpha();
  inline void clear_has_alpha();
  inline void set_has_beta();
  inline void clear_has_beta();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double alpha_;
  double beta_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_AssignDesc_app_2flinear_5fmethod_2fproto_2flinear_2eproto();
  friend void protobuf_ShutdownFile_app_2flinear_5fmethod_2fproto_2flinear_2eproto();

  void InitAsDefaultInstance();
  static LearningRateConfig* default_instance_;
};
// ===================================================================

static const int kDeltaInitValueFieldNumber = 101;
extern ::google::protobuf::internal::ExtensionIdentifier< ::PS::BCDConfig,
    ::google::protobuf::internal::PrimitiveTypeTraits< double >, 1, false >
  delta_init_value;
static const int kDeltaMaxValueFieldNumber = 102;
extern ::google::protobuf::internal::ExtensionIdentifier< ::PS::BCDConfig,
    ::google::protobuf::internal::PrimitiveTypeTraits< double >, 1, false >
  delta_max_value;
static const int kKktFilterThresholdRatioFieldNumber = 103;
extern ::google::protobuf::internal::ExtensionIdentifier< ::PS::BCDConfig,
    ::google::protobuf::internal::PrimitiveTypeTraits< double >, 1, false >
  kkt_filter_threshold_ratio;

// ===================================================================

// Config

// optional .PS.DataConfig training_data = 1;
inline bool Config::has_training_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Config::set_has_training_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Config::clear_has_training_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Config::clear_training_data() {
  if (training_data_ != NULL) training_data_->::PS::DataConfig::Clear();
  clear_has_training_data();
}
inline const ::PS::DataConfig& Config::training_data() const {
  return training_data_ != NULL ? *training_data_ : *default_instance_->training_data_;
}
inline ::PS::DataConfig* Config::mutable_training_data() {
  set_has_training_data();
  if (training_data_ == NULL) training_data_ = new ::PS::DataConfig;
  return training_data_;
}
inline ::PS::DataConfig* Config::release_training_data() {
  clear_has_training_data();
  ::PS::DataConfig* temp = training_data_;
  training_data_ = NULL;
  return temp;
}
inline void Config::set_allocated_training_data(::PS::DataConfig* training_data) {
  delete training_data_;
  training_data_ = training_data;
  if (training_data) {
    set_has_training_data();
  } else {
    clear_has_training_data();
  }
}

// optional .PS.DataConfig validation_data = 2;
inline bool Config::has_validation_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Config::set_has_validation_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Config::clear_has_validation_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Config::clear_validation_data() {
  if (validation_data_ != NULL) validation_data_->::PS::DataConfig::Clear();
  clear_has_validation_data();
}
inline const ::PS::DataConfig& Config::validation_data() const {
  return validation_data_ != NULL ? *validation_data_ : *default_instance_->validation_data_;
}
inline ::PS::DataConfig* Config::mutable_validation_data() {
  set_has_validation_data();
  if (validation_data_ == NULL) validation_data_ = new ::PS::DataConfig;
  return validation_data_;
}
inline ::PS::DataConfig* Config::release_validation_data() {
  clear_has_validation_data();
  ::PS::DataConfig* temp = validation_data_;
  validation_data_ = NULL;
  return temp;
}
inline void Config::set_allocated_validation_data(::PS::DataConfig* validation_data) {
  delete validation_data_;
  validation_data_ = validation_data;
  if (validation_data) {
    set_has_validation_data();
  } else {
    clear_has_validation_data();
  }
}

// optional .PS.DataConfig model_output = 4;
inline bool Config::has_model_output() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Config::set_has_model_output() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Config::clear_has_model_output() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Config::clear_model_output() {
  if (model_output_ != NULL) model_output_->::PS::DataConfig::Clear();
  clear_has_model_output();
}
inline const ::PS::DataConfig& Config::model_output() const {
  return model_output_ != NULL ? *model_output_ : *default_instance_->model_output_;
}
inline ::PS::DataConfig* Config::mutable_model_output() {
  set_has_model_output();
  if (model_output_ == NULL) model_output_ = new ::PS::DataConfig;
  return model_output_;
}
inline ::PS::DataConfig* Config::release_model_output() {
  clear_has_model_output();
  ::PS::DataConfig* temp = model_output_;
  model_output_ = NULL;
  return temp;
}
inline void Config::set_allocated_model_output(::PS::DataConfig* model_output) {
  delete model_output_;
  model_output_ = model_output;
  if (model_output) {
    set_has_model_output();
  } else {
    clear_has_model_output();
  }
}

// optional .PS.DataConfig model_input = 5;
inline bool Config::has_model_input() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Config::set_has_model_input() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Config::clear_has_model_input() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Config::clear_model_input() {
  if (model_input_ != NULL) model_input_->::PS::DataConfig::Clear();
  clear_has_model_input();
}
inline const ::PS::DataConfig& Config::model_input() const {
  return model_input_ != NULL ? *model_input_ : *default_instance_->model_input_;
}
inline ::PS::DataConfig* Config::mutable_model_input() {
  set_has_model_input();
  if (model_input_ == NULL) model_input_ = new ::PS::DataConfig;
  return model_input_;
}
inline ::PS::DataConfig* Config::release_model_input() {
  clear_has_model_input();
  ::PS::DataConfig* temp = model_input_;
  model_input_ = NULL;
  return temp;
}
inline void Config::set_allocated_model_input(::PS::DataConfig* model_input) {
  delete model_input_;
  model_input_ = model_input;
  if (model_input) {
    set_has_model_input();
  } else {
    clear_has_model_input();
  }
}

// optional .PS.LM.LossConfig loss = 10;
inline bool Config::has_loss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Config::set_has_loss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Config::clear_has_loss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Config::clear_loss() {
  if (loss_ != NULL) loss_->::PS::LM::LossConfig::Clear();
  clear_has_loss();
}
inline const ::PS::LM::LossConfig& Config::loss() const {
  return loss_ != NULL ? *loss_ : *default_instance_->loss_;
}
inline ::PS::LM::LossConfig* Config::mutable_loss() {
  set_has_loss();
  if (loss_ == NULL) loss_ = new ::PS::LM::LossConfig;
  return loss_;
}
inline ::PS::LM::LossConfig* Config::release_loss() {
  clear_has_loss();
  ::PS::LM::LossConfig* temp = loss_;
  loss_ = NULL;
  return temp;
}
inline void Config::set_allocated_loss(::PS::LM::LossConfig* loss) {
  delete loss_;
  loss_ = loss;
  if (loss) {
    set_has_loss();
  } else {
    clear_has_loss();
  }
}

// optional .PS.LM.PenaltyConfig penalty = 11;
inline bool Config::has_penalty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Config::set_has_penalty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Config::clear_has_penalty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Config::clear_penalty() {
  if (penalty_ != NULL) penalty_->::PS::LM::PenaltyConfig::Clear();
  clear_has_penalty();
}
inline const ::PS::LM::PenaltyConfig& Config::penalty() const {
  return penalty_ != NULL ? *penalty_ : *default_instance_->penalty_;
}
inline ::PS::LM::PenaltyConfig* Config::mutable_penalty() {
  set_has_penalty();
  if (penalty_ == NULL) penalty_ = new ::PS::LM::PenaltyConfig;
  return penalty_;
}
inline ::PS::LM::PenaltyConfig* Config::release_penalty() {
  clear_has_penalty();
  ::PS::LM::PenaltyConfig* temp = penalty_;
  penalty_ = NULL;
  return temp;
}
inline void Config::set_allocated_penalty(::PS::LM::PenaltyConfig* penalty) {
  delete penalty_;
  penalty_ = penalty;
  if (penalty) {
    set_has_penalty();
  } else {
    clear_has_penalty();
  }
}

// optional .PS.LM.LearningRateConfig learning_rate = 12;
inline bool Config::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Config::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Config::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Config::clear_learning_rate() {
  if (learning_rate_ != NULL) learning_rate_->::PS::LM::LearningRateConfig::Clear();
  clear_has_learning_rate();
}
inline const ::PS::LM::LearningRateConfig& Config::learning_rate() const {
  return learning_rate_ != NULL ? *learning_rate_ : *default_instance_->learning_rate_;
}
inline ::PS::LM::LearningRateConfig* Config::mutable_learning_rate() {
  set_has_learning_rate();
  if (learning_rate_ == NULL) learning_rate_ = new ::PS::LM::LearningRateConfig;
  return learning_rate_;
}
inline ::PS::LM::LearningRateConfig* Config::release_learning_rate() {
  clear_has_learning_rate();
  ::PS::LM::LearningRateConfig* temp = learning_rate_;
  learning_rate_ = NULL;
  return temp;
}
inline void Config::set_allocated_learning_rate(::PS::LM::LearningRateConfig* learning_rate) {
  delete learning_rate_;
  learning_rate_ = learning_rate;
  if (learning_rate) {
    set_has_learning_rate();
  } else {
    clear_has_learning_rate();
  }
}

// optional .PS.LM.SGDConfig async_sgd = 17;
inline bool Config::has_async_sgd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Config::set_has_async_sgd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Config::clear_has_async_sgd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Config::clear_async_sgd() {
  if (async_sgd_ != NULL) async_sgd_->::PS::LM::SGDConfig::Clear();
  clear_has_async_sgd();
}
inline const ::PS::LM::SGDConfig& Config::async_sgd() const {
  return async_sgd_ != NULL ? *async_sgd_ : *default_instance_->async_sgd_;
}
inline ::PS::LM::SGDConfig* Config::mutable_async_sgd() {
  set_has_async_sgd();
  if (async_sgd_ == NULL) async_sgd_ = new ::PS::LM::SGDConfig;
  return async_sgd_;
}
inline ::PS::LM::SGDConfig* Config::release_async_sgd() {
  clear_has_async_sgd();
  ::PS::LM::SGDConfig* temp = async_sgd_;
  async_sgd_ = NULL;
  return temp;
}
inline void Config::set_allocated_async_sgd(::PS::LM::SGDConfig* async_sgd) {
  delete async_sgd_;
  async_sgd_ = async_sgd;
  if (async_sgd) {
    set_has_async_sgd();
  } else {
    clear_has_async_sgd();
  }
}

// optional .PS.BCDConfig darlin = 15;
inline bool Config::has_darlin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Config::set_has_darlin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Config::clear_has_darlin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Config::clear_darlin() {
  if (darlin_ != NULL) darlin_->::PS::BCDConfig::Clear();
  clear_has_darlin();
}
inline const ::PS::BCDConfig& Config::darlin() const {
  return darlin_ != NULL ? *darlin_ : *default_instance_->darlin_;
}
inline ::PS::BCDConfig* Config::mutable_darlin() {
  set_has_darlin();
  if (darlin_ == NULL) darlin_ = new ::PS::BCDConfig;
  return darlin_;
}
inline ::PS::BCDConfig* Config::release_darlin() {
  clear_has_darlin();
  ::PS::BCDConfig* temp = darlin_;
  darlin_ = NULL;
  return temp;
}
inline void Config::set_allocated_darlin(::PS::BCDConfig* darlin) {
  delete darlin_;
  darlin_ = darlin;
  if (darlin) {
    set_has_darlin();
  } else {
    clear_has_darlin();
  }
}

// -------------------------------------------------------------------

// SGDConfig

// required .PS.LM.SGDConfig.Algo algo = 1;
inline bool SGDConfig::has_algo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SGDConfig::set_has_algo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SGDConfig::clear_has_algo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SGDConfig::clear_algo() {
  algo_ = 1;
  clear_has_algo();
}
inline ::PS::LM::SGDConfig_Algo SGDConfig::algo() const {
  return static_cast< ::PS::LM::SGDConfig_Algo >(algo_);
}
inline void SGDConfig::set_algo(::PS::LM::SGDConfig_Algo value) {
  assert(::PS::LM::SGDConfig_Algo_IsValid(value));
  set_has_algo();
  algo_ = value;
}

// optional int32 minibatch = 2 [default = 1000];
inline bool SGDConfig::has_minibatch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SGDConfig::set_has_minibatch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SGDConfig::clear_has_minibatch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SGDConfig::clear_minibatch() {
  minibatch_ = 1000;
  clear_has_minibatch();
}
inline ::google::protobuf::int32 SGDConfig::minibatch() const {
  return minibatch_;
}
inline void SGDConfig::set_minibatch(::google::protobuf::int32 value) {
  set_has_minibatch();
  minibatch_ = value;
}

// optional int32 data_buf = 12 [default = 100];
inline bool SGDConfig::has_data_buf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SGDConfig::set_has_data_buf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SGDConfig::clear_has_data_buf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SGDConfig::clear_data_buf() {
  data_buf_ = 100;
  clear_has_data_buf();
}
inline ::google::protobuf::int32 SGDConfig::data_buf() const {
  return data_buf_;
}
inline void SGDConfig::set_data_buf(::google::protobuf::int32 value) {
  set_has_data_buf();
  data_buf_ = value;
}

// optional bool ada_grad = 5 [default = true];
inline bool SGDConfig::has_ada_grad() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SGDConfig::set_has_ada_grad() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SGDConfig::clear_has_ada_grad() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SGDConfig::clear_ada_grad() {
  ada_grad_ = true;
  clear_has_ada_grad();
}
inline bool SGDConfig::ada_grad() const {
  return ada_grad_;
}
inline void SGDConfig::set_ada_grad(bool value) {
  set_has_ada_grad();
  ada_grad_ = value;
}

// optional int32 max_delay = 4 [default = 0];
inline bool SGDConfig::has_max_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SGDConfig::set_has_max_delay() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SGDConfig::clear_has_max_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SGDConfig::clear_max_delay() {
  max_delay_ = 0;
  clear_has_max_delay();
}
inline ::google::protobuf::int32 SGDConfig::max_delay() const {
  return max_delay_;
}
inline void SGDConfig::set_max_delay(::google::protobuf::int32 value) {
  set_has_max_delay();
  max_delay_ = value;
}

// optional int32 num_data_pass = 11 [default = 1];
inline bool SGDConfig::has_num_data_pass() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SGDConfig::set_has_num_data_pass() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SGDConfig::clear_has_num_data_pass() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SGDConfig::clear_num_data_pass() {
  num_data_pass_ = 1;
  clear_has_num_data_pass();
}
inline ::google::protobuf::int32 SGDConfig::num_data_pass() const {
  return num_data_pass_;
}
inline void SGDConfig::set_num_data_pass(::google::protobuf::int32 value) {
  set_has_num_data_pass();
  num_data_pass_ = value;
}

// optional int32 report_interval = 3 [default = 1];
inline bool SGDConfig::has_report_interval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SGDConfig::set_has_report_interval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SGDConfig::clear_has_report_interval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SGDConfig::clear_report_interval() {
  report_interval_ = 1;
  clear_has_report_interval();
}
inline ::google::protobuf::int32 SGDConfig::report_interval() const {
  return report_interval_;
}
inline void SGDConfig::set_report_interval(::google::protobuf::int32 value) {
  set_has_report_interval();
  report_interval_ = value;
}

// optional int32 tail_feature_freq = 6 [default = 0];
inline bool SGDConfig::has_tail_feature_freq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SGDConfig::set_has_tail_feature_freq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SGDConfig::clear_has_tail_feature_freq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SGDConfig::clear_tail_feature_freq() {
  tail_feature_freq_ = 0;
  clear_has_tail_feature_freq();
}
inline ::google::protobuf::int32 SGDConfig::tail_feature_freq() const {
  return tail_feature_freq_;
}
inline void SGDConfig::set_tail_feature_freq(::google::protobuf::int32 value) {
  set_has_tail_feature_freq();
  tail_feature_freq_ = value;
}

// optional int32 countmin_k = 7 [default = 2];
inline bool SGDConfig::has_countmin_k() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SGDConfig::set_has_countmin_k() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SGDConfig::clear_has_countmin_k() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SGDConfig::clear_countmin_k() {
  countmin_k_ = 2;
  clear_has_countmin_k();
}
inline ::google::protobuf::int32 SGDConfig::countmin_k() const {
  return countmin_k_;
}
inline void SGDConfig::set_countmin_k(::google::protobuf::int32 value) {
  set_has_countmin_k();
  countmin_k_ = value;
}

// optional float countmin_n = 8 [default = 1e+07];
inline bool SGDConfig::has_countmin_n() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SGDConfig::set_has_countmin_n() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SGDConfig::clear_has_countmin_n() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SGDConfig::clear_countmin_n() {
  countmin_n_ = 1e+07f;
  clear_has_countmin_n();
}
inline float SGDConfig::countmin_n() const {
  return countmin_n_;
}
inline void SGDConfig::set_countmin_n(float value) {
  set_has_countmin_n();
  countmin_n_ = value;
}

// -------------------------------------------------------------------

// LossConfig

// required .PS.LM.LossConfig.Type type = 1;
inline bool LossConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::LM::LossConfig_Type LossConfig::type() const {
  return static_cast< ::PS::LM::LossConfig_Type >(type_);
}
inline void LossConfig::set_type(::PS::LM::LossConfig_Type value) {
  assert(::PS::LM::LossConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// PenaltyConfig

// required .PS.LM.PenaltyConfig.Type type = 1;
inline bool PenaltyConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PenaltyConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PenaltyConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PenaltyConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::LM::PenaltyConfig_Type PenaltyConfig::type() const {
  return static_cast< ::PS::LM::PenaltyConfig_Type >(type_);
}
inline void PenaltyConfig::set_type(::PS::LM::PenaltyConfig_Type value) {
  assert(::PS::LM::PenaltyConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated double lambda = 2;
inline int PenaltyConfig::lambda_size() const {
  return lambda_.size();
}
inline void PenaltyConfig::clear_lambda() {
  lambda_.Clear();
}
inline double PenaltyConfig::lambda(int index) const {
  return lambda_.Get(index);
}
inline void PenaltyConfig::set_lambda(int index, double value) {
  lambda_.Set(index, value);
}
inline void PenaltyConfig::add_lambda(double value) {
  lambda_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
PenaltyConfig::lambda() const {
  return lambda_;
}
inline ::google::protobuf::RepeatedField< double >*
PenaltyConfig::mutable_lambda() {
  return &lambda_;
}

// -------------------------------------------------------------------

// LearningRateConfig

// optional .PS.LM.LearningRateConfig.Type type = 1;
inline bool LearningRateConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LearningRateConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LearningRateConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LearningRateConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PS::LM::LearningRateConfig_Type LearningRateConfig::type() const {
  return static_cast< ::PS::LM::LearningRateConfig_Type >(type_);
}
inline void LearningRateConfig::set_type(::PS::LM::LearningRateConfig_Type value) {
  assert(::PS::LM::LearningRateConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional double alpha = 2;
inline bool LearningRateConfig::has_alpha() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LearningRateConfig::set_has_alpha() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LearningRateConfig::clear_has_alpha() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LearningRateConfig::clear_alpha() {
  alpha_ = 0;
  clear_has_alpha();
}
inline double LearningRateConfig::alpha() const {
  return alpha_;
}
inline void LearningRateConfig::set_alpha(double value) {
  set_has_alpha();
  alpha_ = value;
}

// optional double beta = 3;
inline bool LearningRateConfig::has_beta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LearningRateConfig::set_has_beta() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LearningRateConfig::clear_has_beta() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LearningRateConfig::clear_beta() {
  beta_ = 0;
  clear_has_beta();
}
inline double LearningRateConfig::beta() const {
  return beta_;
}
inline void LearningRateConfig::set_beta(double value) {
  set_has_beta();
  beta_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LM
}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::LM::SGDConfig_Algo>() {
  return ::PS::LM::SGDConfig_Algo_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::LM::LossConfig_Type>() {
  return ::PS::LM::LossConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::LM::PenaltyConfig_Type>() {
  return ::PS::LM::PenaltyConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::LM::LearningRateConfig_Type>() {
  return ::PS::LM::LearningRateConfig_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_app_2flinear_5fmethod_2fproto_2flinear_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: learner/proto/bcd.proto

#ifndef PROTOBUF_learner_2fproto_2fbcd_2eproto__INCLUDED
#define PROTOBUF_learner_2fproto_2fbcd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "util/proto/range.pb.h"
#include "data/proto/data.pb.h"
#include "data/proto/example.pb.h"
#include "parameter/proto/param.pb.h"
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
void protobuf_AssignDesc_learner_2fproto_2fbcd_2eproto();
void protobuf_ShutdownFile_learner_2fproto_2fbcd_2eproto();

class BCDConfig;
class BCDProgress;
class BCDCall;
class LoadDataReturn;

enum BCDCall_Command {
  BCDCall_Command_LOAD_DATA = 1,
  BCDCall_Command_PREPROCESS_DATA = 2,
  BCDCall_Command_UPDATE_MODEL = 3,
  BCDCall_Command_EVALUATE_PROGRESS = 4,
  BCDCall_Command_SAVE_MODEL = 5,
  BCDCall_Command_RECOVER = 6,
  BCDCall_Command_COMPUTE_VALIDATION_AUC = 7
};
bool BCDCall_Command_IsValid(int value);
const BCDCall_Command BCDCall_Command_Command_MIN = BCDCall_Command_LOAD_DATA;
const BCDCall_Command BCDCall_Command_Command_MAX = BCDCall_Command_COMPUTE_VALIDATION_AUC;
const int BCDCall_Command_Command_ARRAYSIZE = BCDCall_Command_Command_MAX + 1;

const ::google::protobuf::EnumDescriptor* BCDCall_Command_descriptor();
inline const ::std::string& BCDCall_Command_Name(BCDCall_Command value) {
  return ::google::protobuf::internal::NameOfEnum(
    BCDCall_Command_descriptor(), value);
}
inline bool BCDCall_Command_Parse(
    const ::std::string& name, BCDCall_Command* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BCDCall_Command>(
    BCDCall_Command_descriptor(), name, value);
}
// ===================================================================

class BCDConfig : public ::google::protobuf::Message {
 public:
  BCDConfig();
  virtual ~BCDConfig();

  BCDConfig(const BCDConfig& from);

  inline BCDConfig& operator=(const BCDConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BCDConfig& default_instance();

  void Swap(BCDConfig* other);

  // implements Message ----------------------------------------------

  BCDConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BCDConfig& from);
  void MergeFrom(const BCDConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float feature_block_ratio = 1 [default = 4];
  inline bool has_feature_block_ratio() const;
  inline void clear_feature_block_ratio();
  static const int kFeatureBlockRatioFieldNumber = 1;
  inline float feature_block_ratio() const;
  inline void set_feature_block_ratio(float value);

  // optional bool random_feature_block_order = 2 [default = true];
  inline bool has_random_feature_block_order() const;
  inline void clear_random_feature_block_order();
  static const int kRandomFeatureBlockOrderFieldNumber = 2;
  inline bool random_feature_block_order() const;
  inline void set_random_feature_block_order(bool value);

  // repeated int32 prior_fea_group = 14;
  inline int prior_fea_group_size() const;
  inline void clear_prior_fea_group();
  static const int kPriorFeaGroupFieldNumber = 14;
  inline ::google::protobuf::int32 prior_fea_group(int index) const;
  inline void set_prior_fea_group(int index, ::google::protobuf::int32 value);
  inline void add_prior_fea_group(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      prior_fea_group() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_prior_fea_group();

  // optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
  inline bool has_num_iter_for_prior_fea_group() const;
  inline void clear_num_iter_for_prior_fea_group();
  static const int kNumIterForPriorFeaGroupFieldNumber = 13;
  inline ::google::protobuf::int32 num_iter_for_prior_fea_group() const;
  inline void set_num_iter_for_prior_fea_group(::google::protobuf::int32 value);

  // optional int32 max_block_delay = 3 [default = 0];
  inline bool has_max_block_delay() const;
  inline void clear_max_block_delay();
  static const int kMaxBlockDelayFieldNumber = 3;
  inline ::google::protobuf::int32 max_block_delay() const;
  inline void set_max_block_delay(::google::protobuf::int32 value);

  // optional int32 max_pass_of_data = 4 [default = 10];
  inline bool has_max_pass_of_data() const;
  inline void clear_max_pass_of_data();
  static const int kMaxPassOfDataFieldNumber = 4;
  inline ::google::protobuf::int32 max_pass_of_data() const;
  inline void set_max_pass_of_data(::google::protobuf::int32 value);

  // optional double epsilon = 5 [default = 0.0001];
  inline bool has_epsilon() const;
  inline void clear_epsilon();
  static const int kEpsilonFieldNumber = 5;
  inline double epsilon() const;
  inline void set_epsilon(double value);

  // optional int32 tail_feature_freq = 6 [default = 0];
  inline bool has_tail_feature_freq() const;
  inline void clear_tail_feature_freq();
  static const int kTailFeatureFreqFieldNumber = 6;
  inline ::google::protobuf::int32 tail_feature_freq() const;
  inline void set_tail_feature_freq(::google::protobuf::int32 value);

  // optional int32 countmin_k = 7 [default = 2];
  inline bool has_countmin_k() const;
  inline void clear_countmin_k();
  static const int kCountminKFieldNumber = 7;
  inline ::google::protobuf::int32 countmin_k() const;
  inline void set_countmin_k(::google::protobuf::int32 value);

  // optional double countmin_n_ratio = 8 [default = 2];
  inline bool has_countmin_n_ratio() const;
  inline void clear_countmin_n_ratio();
  static const int kCountminNRatioFieldNumber = 8;
  inline double countmin_n_ratio() const;
  inline void set_countmin_n_ratio(double value);

  // optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
  inline bool has_max_num_parallel_groups_in_preprocessing() const;
  inline void clear_max_num_parallel_groups_in_preprocessing();
  static const int kMaxNumParallelGroupsInPreprocessingFieldNumber = 9;
  inline ::google::protobuf::int32 max_num_parallel_groups_in_preprocessing() const;
  inline void set_max_num_parallel_groups_in_preprocessing(::google::protobuf::int32 value);

  // optional int32 max_data_buf_size_in_mb = 10 [default = 1000];
  inline bool has_max_data_buf_size_in_mb() const;
  inline void clear_max_data_buf_size_in_mb();
  static const int kMaxDataBufSizeInMbFieldNumber = 10;
  inline ::google::protobuf::int32 max_data_buf_size_in_mb() const;
  inline void set_max_data_buf_size_in_mb(::google::protobuf::int32 value);

  // optional .PS.DataConfig local_cache = 11;
  inline bool has_local_cache() const;
  inline void clear_local_cache();
  static const int kLocalCacheFieldNumber = 11;
  inline const ::PS::DataConfig& local_cache() const;
  inline ::PS::DataConfig* mutable_local_cache();
  inline ::PS::DataConfig* release_local_cache();
  inline void set_allocated_local_cache(::PS::DataConfig* local_cache);

  // optional .PS.ParameterInitConfig init_w = 12;
  inline bool has_init_w() const;
  inline void clear_init_w();
  static const int kInitWFieldNumber = 12;
  inline const ::PS::ParameterInitConfig& init_w() const;
  inline ::PS::ParameterInitConfig* mutable_init_w();
  inline ::PS::ParameterInitConfig* release_init_w();
  inline void set_allocated_init_w(::PS::ParameterInitConfig* init_w);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BCDConfig)
  // @@protoc_insertion_point(class_scope:PS.BCDConfig)
 private:
  inline void set_has_feature_block_ratio();
  inline void clear_has_feature_block_ratio();
  inline void set_has_random_feature_block_order();
  inline void clear_has_random_feature_block_order();
  inline void set_has_num_iter_for_prior_fea_group();
  inline void clear_has_num_iter_for_prior_fea_group();
  inline void set_has_max_block_delay();
  inline void clear_has_max_block_delay();
  inline void set_has_max_pass_of_data();
  inline void clear_has_max_pass_of_data();
  inline void set_has_epsilon();
  inline void clear_has_epsilon();
  inline void set_has_tail_feature_freq();
  inline void clear_has_tail_feature_freq();
  inline void set_has_countmin_k();
  inline void clear_has_countmin_k();
  inline void set_has_countmin_n_ratio();
  inline void clear_has_countmin_n_ratio();
  inline void set_has_max_num_parallel_groups_in_preprocessing();
  inline void clear_has_max_num_parallel_groups_in_preprocessing();
  inline void set_has_max_data_buf_size_in_mb();
  inline void clear_has_max_data_buf_size_in_mb();
  inline void set_has_local_cache();
  inline void clear_has_local_cache();
  inline void set_has_init_w();
  inline void clear_has_init_w();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float feature_block_ratio_;
  bool random_feature_block_order_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > prior_fea_group_;
  ::google::protobuf::int32 num_iter_for_prior_fea_group_;
  ::google::protobuf::int32 max_block_delay_;
  double epsilon_;
  ::google::protobuf::int32 max_pass_of_data_;
  ::google::protobuf::int32 tail_feature_freq_;
  double countmin_n_ratio_;
  ::google::protobuf::int32 countmin_k_;
  ::google::protobuf::int32 max_num_parallel_groups_in_preprocessing_;
  ::PS::DataConfig* local_cache_;
  ::PS::ParameterInitConfig* init_w_;
  ::google::protobuf::int32 max_data_buf_size_in_mb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  friend void protobuf_AssignDesc_learner_2fproto_2fbcd_2eproto();
  friend void protobuf_ShutdownFile_learner_2fproto_2fbcd_2eproto();

  void InitAsDefaultInstance();
  static BCDConfig* default_instance_;
};
// -------------------------------------------------------------------

class BCDProgress : public ::google::protobuf::Message {
 public:
  BCDProgress();
  virtual ~BCDProgress();

  BCDProgress(const BCDProgress& from);

  inline BCDProgress& operator=(const BCDProgress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BCDProgress& default_instance();

  void Swap(BCDProgress* other);

  // implements Message ----------------------------------------------

  BCDProgress* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BCDProgress& from);
  void MergeFrom(const BCDProgress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double objective = 1;
  inline bool has_objective() const;
  inline void clear_objective();
  static const int kObjectiveFieldNumber = 1;
  inline double objective() const;
  inline void set_objective(double value);

  // optional double relative_obj = 2;
  inline bool has_relative_obj() const;
  inline void clear_relative_obj();
  static const int kRelativeObjFieldNumber = 2;
  inline double relative_obj() const;
  inline void set_relative_obj(double value);

  // optional uint64 nnz_w = 5;
  inline bool has_nnz_w() const;
  inline void clear_nnz_w();
  static const int kNnzWFieldNumber = 5;
  inline ::google::protobuf::uint64 nnz_w() const;
  inline void set_nnz_w(::google::protobuf::uint64 value);

  // optional double violation = 6;
  inline bool has_violation() const;
  inline void clear_violation();
  static const int kViolationFieldNumber = 6;
  inline double violation() const;
  inline void set_violation(double value);

  // optional uint64 nnz_active_set = 7;
  inline bool has_nnz_active_set() const;
  inline void clear_nnz_active_set();
  static const int kNnzActiveSetFieldNumber = 7;
  inline ::google::protobuf::uint64 nnz_active_set() const;
  inline void set_nnz_active_set(::google::protobuf::uint64 value);

  // optional double total_time = 10;
  inline bool has_total_time() const;
  inline void clear_total_time();
  static const int kTotalTimeFieldNumber = 10;
  inline double total_time() const;
  inline void set_total_time(double value);

  // repeated double busy_time = 11;
  inline int busy_time_size() const;
  inline void clear_busy_time();
  static const int kBusyTimeFieldNumber = 11;
  inline double busy_time(int index) const;
  inline void set_busy_time(int index, double value);
  inline void add_busy_time(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      busy_time() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_busy_time();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(BCDProgress)
  // @@protoc_insertion_point(class_scope:PS.BCDProgress)
 private:
  inline void set_has_objective();
  inline void clear_has_objective();
  inline void set_has_relative_obj();
  inline void clear_has_relative_obj();
  inline void set_has_nnz_w();
  inline void clear_has_nnz_w();
  inline void set_has_violation();
  inline void clear_has_violation();
  inline void set_has_nnz_active_set();
  inline void clear_has_nnz_active_set();
  inline void set_has_total_time();
  inline void clear_has_total_time();

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double objective_;
  double relative_obj_;
  ::google::protobuf::uint64 nnz_w_;
  double violation_;
  ::google::protobuf::uint64 nnz_active_set_;
  double total_time_;
  ::google::protobuf::RepeatedField< double > busy_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  friend void protobuf_AssignDesc_learner_2fproto_2fbcd_2eproto();
  friend void protobuf_ShutdownFile_learner_2fproto_2fbcd_2eproto();

  void InitAsDefaultInstance();
  static BCDProgress* default_instance_;
};
// -------------------------------------------------------------------

class BCDCall : public ::google::protobuf::Message {
 public:
  BCDCall();
  virtual ~BCDCall();

  BCDCall(const BCDCall& from);

  inline BCDCall& operator=(const BCDCall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BCDCall& default_instance();

  void Swap(BCDCall* other);

  // implements Message ----------------------------------------------

  BCDCall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BCDCall& from);
  void MergeFrom(const BCDCall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BCDCall_Command Command;
  static const Command LOAD_DATA = BCDCall_Command_LOAD_DATA;
  static const Command PREPROCESS_DATA = BCDCall_Command_PREPROCESS_DATA;
  static const Command UPDATE_MODEL = BCDCall_Command_UPDATE_MODEL;
  static const Command EVALUATE_PROGRESS = BCDCall_Command_EVALUATE_PROGRESS;
  static const Command SAVE_MODEL = BCDCall_Command_SAVE_MODEL;
  static const Command RECOVER = BCDCall_Command_RECOVER;
  static const Command COMPUTE_VALIDATION_AUC = BCDCall_Command_COMPUTE_VALIDATION_AUC;
  static inline bool Command_IsValid(int value) {
    return BCDCall_Command_IsValid(value);
  }
  static const Command Command_MIN =
    BCDCall_Command_Command_MIN;
  static const Command Command_MAX =
    BCDCall_Command_Command_MAX;
  static const int Command_ARRAYSIZE =
    BCDCall_Command_Command_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Command_descriptor() {
    return BCDCall_Command_descriptor();
  }
  static inline const ::std::string& Command_Name(Command value) {
    return BCDCall_Command_Name(value);
  }
  static inline bool Command_Parse(const ::std::string& name,
      Command* value) {
    return BCDCall_Command_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PS.BCDCall.Command cmd = 1;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::PS::BCDCall_Command cmd() const;
  inline void set_cmd(::PS::BCDCall_Command value);

  // optional .PS.PbRange key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::PS::PbRange& key() const;
  inline ::PS::PbRange* mutable_key();
  inline ::PS::PbRange* release_key();
  inline void set_allocated_key(::PS::PbRange* key);

  // optional double kkt_filter_threshold = 4;
  inline bool has_kkt_filter_threshold() const;
  inline void clear_kkt_filter_threshold();
  static const int kKktFilterThresholdFieldNumber = 4;
  inline double kkt_filter_threshold() const;
  inline void set_kkt_filter_threshold(double value);

  // optional bool reset_kkt_filter = 5;
  inline bool has_reset_kkt_filter() const;
  inline void clear_reset_kkt_filter();
  static const int kResetKktFilterFieldNumber = 5;
  inline bool reset_kkt_filter() const;
  inline void set_reset_kkt_filter(bool value);

  // repeated int32 fea_grp = 8;
  inline int fea_grp_size() const;
  inline void clear_fea_grp();
  static const int kFeaGrpFieldNumber = 8;
  inline ::google::protobuf::int32 fea_grp(int index) const;
  inline void set_fea_grp(int index, ::google::protobuf::int32 value);
  inline void add_fea_grp(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fea_grp() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fea_grp();

  // optional bool hit_cache = 9;
  inline bool has_hit_cache() const;
  inline void clear_hit_cache();
  static const int kHitCacheFieldNumber = 9;
  inline bool hit_cache() const;
  inline void set_hit_cache(bool value);

  // optional .PS.DataConfig data = 10;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 10;
  inline const ::PS::DataConfig& data() const;
  inline ::PS::DataConfig* mutable_data();
  inline ::PS::DataConfig* release_data();
  inline void set_allocated_data(::PS::DataConfig* data);

  // @@protoc_insertion_point(class_scope:PS.BCDCall)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_kkt_filter_threshold();
  inline void clear_has_kkt_filter_threshold();
  inline void set_has_reset_kkt_filter();
  inline void clear_has_reset_kkt_filter();
  inline void set_has_hit_cache();
  inline void clear_has_hit_cache();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::PbRange* key_;
  double kkt_filter_threshold_;
  int cmd_;
  bool reset_kkt_filter_;
  bool hit_cache_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fea_grp_;
  ::PS::DataConfig* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  friend void protobuf_AssignDesc_learner_2fproto_2fbcd_2eproto();
  friend void protobuf_ShutdownFile_learner_2fproto_2fbcd_2eproto();

  void InitAsDefaultInstance();
  static BCDCall* default_instance_;
};
// -------------------------------------------------------------------

class LoadDataReturn : public ::google::protobuf::Message {
 public:
  LoadDataReturn();
  virtual ~LoadDataReturn();

  LoadDataReturn(const LoadDataReturn& from);

  inline LoadDataReturn& operator=(const LoadDataReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadDataReturn& default_instance();

  void Swap(LoadDataReturn* other);

  // implements Message ----------------------------------------------

  LoadDataReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoadDataReturn& from);
  void MergeFrom(const LoadDataReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PS.ExampleInfo example_info = 1;
  inline bool has_example_info() const;
  inline void clear_example_info();
  static const int kExampleInfoFieldNumber = 1;
  inline const ::PS::ExampleInfo& example_info() const;
  inline ::PS::ExampleInfo* mutable_example_info();
  inline ::PS::ExampleInfo* release_example_info();
  inline void set_allocated_example_info(::PS::ExampleInfo* example_info);

  // optional int32 hit_cache = 2;
  inline bool has_hit_cache() const;
  inline void clear_hit_cache();
  static const int kHitCacheFieldNumber = 2;
  inline ::google::protobuf::int32 hit_cache() const;
  inline void set_hit_cache(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PS.LoadDataReturn)
 private:
  inline void set_has_example_info();
  inline void clear_has_example_info();
  inline void set_has_hit_cache();
  inline void clear_has_hit_cache();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PS::ExampleInfo* example_info_;
  ::google::protobuf::int32 hit_cache_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_learner_2fproto_2fbcd_2eproto();
  friend void protobuf_AssignDesc_learner_2fproto_2fbcd_2eproto();
  friend void protobuf_ShutdownFile_learner_2fproto_2fbcd_2eproto();

  void InitAsDefaultInstance();
  static LoadDataReturn* default_instance_;
};
// ===================================================================


// ===================================================================

// BCDConfig

// optional float feature_block_ratio = 1 [default = 4];
inline bool BCDConfig::has_feature_block_ratio() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BCDConfig::set_has_feature_block_ratio() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BCDConfig::clear_has_feature_block_ratio() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BCDConfig::clear_feature_block_ratio() {
  feature_block_ratio_ = 4;
  clear_has_feature_block_ratio();
}
inline float BCDConfig::feature_block_ratio() const {
  return feature_block_ratio_;
}
inline void BCDConfig::set_feature_block_ratio(float value) {
  set_has_feature_block_ratio();
  feature_block_ratio_ = value;
}

// optional bool random_feature_block_order = 2 [default = true];
inline bool BCDConfig::has_random_feature_block_order() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BCDConfig::set_has_random_feature_block_order() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BCDConfig::clear_has_random_feature_block_order() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BCDConfig::clear_random_feature_block_order() {
  random_feature_block_order_ = true;
  clear_has_random_feature_block_order();
}
inline bool BCDConfig::random_feature_block_order() const {
  return random_feature_block_order_;
}
inline void BCDConfig::set_random_feature_block_order(bool value) {
  set_has_random_feature_block_order();
  random_feature_block_order_ = value;
}

// repeated int32 prior_fea_group = 14;
inline int BCDConfig::prior_fea_group_size() const {
  return prior_fea_group_.size();
}
inline void BCDConfig::clear_prior_fea_group() {
  prior_fea_group_.Clear();
}
inline ::google::protobuf::int32 BCDConfig::prior_fea_group(int index) const {
  return prior_fea_group_.Get(index);
}
inline void BCDConfig::set_prior_fea_group(int index, ::google::protobuf::int32 value) {
  prior_fea_group_.Set(index, value);
}
inline void BCDConfig::add_prior_fea_group(::google::protobuf::int32 value) {
  prior_fea_group_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BCDConfig::prior_fea_group() const {
  return prior_fea_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BCDConfig::mutable_prior_fea_group() {
  return &prior_fea_group_;
}

// optional int32 num_iter_for_prior_fea_group = 13 [default = 5];
inline bool BCDConfig::has_num_iter_for_prior_fea_group() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BCDConfig::set_has_num_iter_for_prior_fea_group() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BCDConfig::clear_has_num_iter_for_prior_fea_group() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BCDConfig::clear_num_iter_for_prior_fea_group() {
  num_iter_for_prior_fea_group_ = 5;
  clear_has_num_iter_for_prior_fea_group();
}
inline ::google::protobuf::int32 BCDConfig::num_iter_for_prior_fea_group() const {
  return num_iter_for_prior_fea_group_;
}
inline void BCDConfig::set_num_iter_for_prior_fea_group(::google::protobuf::int32 value) {
  set_has_num_iter_for_prior_fea_group();
  num_iter_for_prior_fea_group_ = value;
}

// optional int32 max_block_delay = 3 [default = 0];
inline bool BCDConfig::has_max_block_delay() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BCDConfig::set_has_max_block_delay() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BCDConfig::clear_has_max_block_delay() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BCDConfig::clear_max_block_delay() {
  max_block_delay_ = 0;
  clear_has_max_block_delay();
}
inline ::google::protobuf::int32 BCDConfig::max_block_delay() const {
  return max_block_delay_;
}
inline void BCDConfig::set_max_block_delay(::google::protobuf::int32 value) {
  set_has_max_block_delay();
  max_block_delay_ = value;
}

// optional int32 max_pass_of_data = 4 [default = 10];
inline bool BCDConfig::has_max_pass_of_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BCDConfig::set_has_max_pass_of_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BCDConfig::clear_has_max_pass_of_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BCDConfig::clear_max_pass_of_data() {
  max_pass_of_data_ = 10;
  clear_has_max_pass_of_data();
}
inline ::google::protobuf::int32 BCDConfig::max_pass_of_data() const {
  return max_pass_of_data_;
}
inline void BCDConfig::set_max_pass_of_data(::google::protobuf::int32 value) {
  set_has_max_pass_of_data();
  max_pass_of_data_ = value;
}

// optional double epsilon = 5 [default = 0.0001];
inline bool BCDConfig::has_epsilon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BCDConfig::set_has_epsilon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BCDConfig::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BCDConfig::clear_epsilon() {
  epsilon_ = 0.0001;
  clear_has_epsilon();
}
inline double BCDConfig::epsilon() const {
  return epsilon_;
}
inline void BCDConfig::set_epsilon(double value) {
  set_has_epsilon();
  epsilon_ = value;
}

// optional int32 tail_feature_freq = 6 [default = 0];
inline bool BCDConfig::has_tail_feature_freq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BCDConfig::set_has_tail_feature_freq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BCDConfig::clear_has_tail_feature_freq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BCDConfig::clear_tail_feature_freq() {
  tail_feature_freq_ = 0;
  clear_has_tail_feature_freq();
}
inline ::google::protobuf::int32 BCDConfig::tail_feature_freq() const {
  return tail_feature_freq_;
}
inline void BCDConfig::set_tail_feature_freq(::google::protobuf::int32 value) {
  set_has_tail_feature_freq();
  tail_feature_freq_ = value;
}

// optional int32 countmin_k = 7 [default = 2];
inline bool BCDConfig::has_countmin_k() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BCDConfig::set_has_countmin_k() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BCDConfig::clear_has_countmin_k() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BCDConfig::clear_countmin_k() {
  countmin_k_ = 2;
  clear_has_countmin_k();
}
inline ::google::protobuf::int32 BCDConfig::countmin_k() const {
  return countmin_k_;
}
inline void BCDConfig::set_countmin_k(::google::protobuf::int32 value) {
  set_has_countmin_k();
  countmin_k_ = value;
}

// optional double countmin_n_ratio = 8 [default = 2];
inline bool BCDConfig::has_countmin_n_ratio() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BCDConfig::set_has_countmin_n_ratio() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BCDConfig::clear_has_countmin_n_ratio() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BCDConfig::clear_countmin_n_ratio() {
  countmin_n_ratio_ = 2;
  clear_has_countmin_n_ratio();
}
inline double BCDConfig::countmin_n_ratio() const {
  return countmin_n_ratio_;
}
inline void BCDConfig::set_countmin_n_ratio(double value) {
  set_has_countmin_n_ratio();
  countmin_n_ratio_ = value;
}

// optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
inline bool BCDConfig::has_max_num_parallel_groups_in_preprocessing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BCDConfig::set_has_max_num_parallel_groups_in_preprocessing() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BCDConfig::clear_has_max_num_parallel_groups_in_preprocessing() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BCDConfig::clear_max_num_parallel_groups_in_preprocessing() {
  max_num_parallel_groups_in_preprocessing_ = 1000;
  clear_has_max_num_parallel_groups_in_preprocessing();
}
inline ::google::protobuf::int32 BCDConfig::max_num_parallel_groups_in_preprocessing() const {
  return max_num_parallel_groups_in_preprocessing_;
}
inline void BCDConfig::set_max_num_parallel_groups_in_preprocessing(::google::protobuf::int32 value) {
  set_has_max_num_parallel_groups_in_preprocessing();
  max_num_parallel_groups_in_preprocessing_ = value;
}

// optional int32 max_data_buf_size_in_mb = 10 [default = 1000];
inline bool BCDConfig::has_max_data_buf_size_in_mb() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BCDConfig::set_has_max_data_buf_size_in_mb() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BCDConfig::clear_has_max_data_buf_size_in_mb() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BCDConfig::clear_max_data_buf_size_in_mb() {
  max_data_buf_size_in_mb_ = 1000;
  clear_has_max_data_buf_size_in_mb();
}
inline ::google::protobuf::int32 BCDConfig::max_data_buf_size_in_mb() const {
  return max_data_buf_size_in_mb_;
}
inline void BCDConfig::set_max_data_buf_size_in_mb(::google::protobuf::int32 value) {
  set_has_max_data_buf_size_in_mb();
  max_data_buf_size_in_mb_ = value;
}

// optional .PS.DataConfig local_cache = 11;
inline bool BCDConfig::has_local_cache() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BCDConfig::set_has_local_cache() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BCDConfig::clear_has_local_cache() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BCDConfig::clear_local_cache() {
  if (local_cache_ != NULL) local_cache_->::PS::DataConfig::Clear();
  clear_has_local_cache();
}
inline const ::PS::DataConfig& BCDConfig::local_cache() const {
  return local_cache_ != NULL ? *local_cache_ : *default_instance_->local_cache_;
}
inline ::PS::DataConfig* BCDConfig::mutable_local_cache() {
  set_has_local_cache();
  if (local_cache_ == NULL) local_cache_ = new ::PS::DataConfig;
  return local_cache_;
}
inline ::PS::DataConfig* BCDConfig::release_local_cache() {
  clear_has_local_cache();
  ::PS::DataConfig* temp = local_cache_;
  local_cache_ = NULL;
  return temp;
}
inline void BCDConfig::set_allocated_local_cache(::PS::DataConfig* local_cache) {
  delete local_cache_;
  local_cache_ = local_cache;
  if (local_cache) {
    set_has_local_cache();
  } else {
    clear_has_local_cache();
  }
}

// optional .PS.ParameterInitConfig init_w = 12;
inline bool BCDConfig::has_init_w() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BCDConfig::set_has_init_w() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BCDConfig::clear_has_init_w() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BCDConfig::clear_init_w() {
  if (init_w_ != NULL) init_w_->::PS::ParameterInitConfig::Clear();
  clear_has_init_w();
}
inline const ::PS::ParameterInitConfig& BCDConfig::init_w() const {
  return init_w_ != NULL ? *init_w_ : *default_instance_->init_w_;
}
inline ::PS::ParameterInitConfig* BCDConfig::mutable_init_w() {
  set_has_init_w();
  if (init_w_ == NULL) init_w_ = new ::PS::ParameterInitConfig;
  return init_w_;
}
inline ::PS::ParameterInitConfig* BCDConfig::release_init_w() {
  clear_has_init_w();
  ::PS::ParameterInitConfig* temp = init_w_;
  init_w_ = NULL;
  return temp;
}
inline void BCDConfig::set_allocated_init_w(::PS::ParameterInitConfig* init_w) {
  delete init_w_;
  init_w_ = init_w;
  if (init_w) {
    set_has_init_w();
  } else {
    clear_has_init_w();
  }
}

// -------------------------------------------------------------------

// BCDProgress

// optional double objective = 1;
inline bool BCDProgress::has_objective() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BCDProgress::set_has_objective() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BCDProgress::clear_has_objective() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BCDProgress::clear_objective() {
  objective_ = 0;
  clear_has_objective();
}
inline double BCDProgress::objective() const {
  return objective_;
}
inline void BCDProgress::set_objective(double value) {
  set_has_objective();
  objective_ = value;
}

// optional double relative_obj = 2;
inline bool BCDProgress::has_relative_obj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BCDProgress::set_has_relative_obj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BCDProgress::clear_has_relative_obj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BCDProgress::clear_relative_obj() {
  relative_obj_ = 0;
  clear_has_relative_obj();
}
inline double BCDProgress::relative_obj() const {
  return relative_obj_;
}
inline void BCDProgress::set_relative_obj(double value) {
  set_has_relative_obj();
  relative_obj_ = value;
}

// optional uint64 nnz_w = 5;
inline bool BCDProgress::has_nnz_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BCDProgress::set_has_nnz_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BCDProgress::clear_has_nnz_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BCDProgress::clear_nnz_w() {
  nnz_w_ = GOOGLE_ULONGLONG(0);
  clear_has_nnz_w();
}
inline ::google::protobuf::uint64 BCDProgress::nnz_w() const {
  return nnz_w_;
}
inline void BCDProgress::set_nnz_w(::google::protobuf::uint64 value) {
  set_has_nnz_w();
  nnz_w_ = value;
}

// optional double violation = 6;
inline bool BCDProgress::has_violation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BCDProgress::set_has_violation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BCDProgress::clear_has_violation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BCDProgress::clear_violation() {
  violation_ = 0;
  clear_has_violation();
}
inline double BCDProgress::violation() const {
  return violation_;
}
inline void BCDProgress::set_violation(double value) {
  set_has_violation();
  violation_ = value;
}

// optional uint64 nnz_active_set = 7;
inline bool BCDProgress::has_nnz_active_set() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BCDProgress::set_has_nnz_active_set() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BCDProgress::clear_has_nnz_active_set() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BCDProgress::clear_nnz_active_set() {
  nnz_active_set_ = GOOGLE_ULONGLONG(0);
  clear_has_nnz_active_set();
}
inline ::google::protobuf::uint64 BCDProgress::nnz_active_set() const {
  return nnz_active_set_;
}
inline void BCDProgress::set_nnz_active_set(::google::protobuf::uint64 value) {
  set_has_nnz_active_set();
  nnz_active_set_ = value;
}

// optional double total_time = 10;
inline bool BCDProgress::has_total_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BCDProgress::set_has_total_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BCDProgress::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BCDProgress::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
inline double BCDProgress::total_time() const {
  return total_time_;
}
inline void BCDProgress::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
}

// repeated double busy_time = 11;
inline int BCDProgress::busy_time_size() const {
  return busy_time_.size();
}
inline void BCDProgress::clear_busy_time() {
  busy_time_.Clear();
}
inline double BCDProgress::busy_time(int index) const {
  return busy_time_.Get(index);
}
inline void BCDProgress::set_busy_time(int index, double value) {
  busy_time_.Set(index, value);
}
inline void BCDProgress::add_busy_time(double value) {
  busy_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
BCDProgress::busy_time() const {
  return busy_time_;
}
inline ::google::protobuf::RepeatedField< double >*
BCDProgress::mutable_busy_time() {
  return &busy_time_;
}

// -------------------------------------------------------------------

// BCDCall

// required .PS.BCDCall.Command cmd = 1;
inline bool BCDCall::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BCDCall::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BCDCall::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BCDCall::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::PS::BCDCall_Command BCDCall::cmd() const {
  return static_cast< ::PS::BCDCall_Command >(cmd_);
}
inline void BCDCall::set_cmd(::PS::BCDCall_Command value) {
  assert(::PS::BCDCall_Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
}

// optional .PS.PbRange key = 2;
inline bool BCDCall::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BCDCall::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BCDCall::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BCDCall::clear_key() {
  if (key_ != NULL) key_->::PS::PbRange::Clear();
  clear_has_key();
}
inline const ::PS::PbRange& BCDCall::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::PS::PbRange* BCDCall::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::PS::PbRange;
  return key_;
}
inline ::PS::PbRange* BCDCall::release_key() {
  clear_has_key();
  ::PS::PbRange* temp = key_;
  key_ = NULL;
  return temp;
}
inline void BCDCall::set_allocated_key(::PS::PbRange* key) {
  delete key_;
  key_ = key;
  if (key) {
    set_has_key();
  } else {
    clear_has_key();
  }
}

// optional double kkt_filter_threshold = 4;
inline bool BCDCall::has_kkt_filter_threshold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BCDCall::set_has_kkt_filter_threshold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BCDCall::clear_has_kkt_filter_threshold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BCDCall::clear_kkt_filter_threshold() {
  kkt_filter_threshold_ = 0;
  clear_has_kkt_filter_threshold();
}
inline double BCDCall::kkt_filter_threshold() const {
  return kkt_filter_threshold_;
}
inline void BCDCall::set_kkt_filter_threshold(double value) {
  set_has_kkt_filter_threshold();
  kkt_filter_threshold_ = value;
}

// optional bool reset_kkt_filter = 5;
inline bool BCDCall::has_reset_kkt_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BCDCall::set_has_reset_kkt_filter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BCDCall::clear_has_reset_kkt_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BCDCall::clear_reset_kkt_filter() {
  reset_kkt_filter_ = false;
  clear_has_reset_kkt_filter();
}
inline bool BCDCall::reset_kkt_filter() const {
  return reset_kkt_filter_;
}
inline void BCDCall::set_reset_kkt_filter(bool value) {
  set_has_reset_kkt_filter();
  reset_kkt_filter_ = value;
}

// repeated int32 fea_grp = 8;
inline int BCDCall::fea_grp_size() const {
  return fea_grp_.size();
}
inline void BCDCall::clear_fea_grp() {
  fea_grp_.Clear();
}
inline ::google::protobuf::int32 BCDCall::fea_grp(int index) const {
  return fea_grp_.Get(index);
}
inline void BCDCall::set_fea_grp(int index, ::google::protobuf::int32 value) {
  fea_grp_.Set(index, value);
}
inline void BCDCall::add_fea_grp(::google::protobuf::int32 value) {
  fea_grp_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BCDCall::fea_grp() const {
  return fea_grp_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BCDCall::mutable_fea_grp() {
  return &fea_grp_;
}

// optional bool hit_cache = 9;
inline bool BCDCall::has_hit_cache() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BCDCall::set_has_hit_cache() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BCDCall::clear_has_hit_cache() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BCDCall::clear_hit_cache() {
  hit_cache_ = false;
  clear_has_hit_cache();
}
inline bool BCDCall::hit_cache() const {
  return hit_cache_;
}
inline void BCDCall::set_hit_cache(bool value) {
  set_has_hit_cache();
  hit_cache_ = value;
}

// optional .PS.DataConfig data = 10;
inline bool BCDCall::has_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BCDCall::set_has_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BCDCall::clear_has_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BCDCall::clear_data() {
  if (data_ != NULL) data_->::PS::DataConfig::Clear();
  clear_has_data();
}
inline const ::PS::DataConfig& BCDCall::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::PS::DataConfig* BCDCall::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::PS::DataConfig;
  return data_;
}
inline ::PS::DataConfig* BCDCall::release_data() {
  clear_has_data();
  ::PS::DataConfig* temp = data_;
  data_ = NULL;
  return temp;
}
inline void BCDCall::set_allocated_data(::PS::DataConfig* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// LoadDataReturn

// optional .PS.ExampleInfo example_info = 1;
inline bool LoadDataReturn::has_example_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadDataReturn::set_has_example_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadDataReturn::clear_has_example_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadDataReturn::clear_example_info() {
  if (example_info_ != NULL) example_info_->::PS::ExampleInfo::Clear();
  clear_has_example_info();
}
inline const ::PS::ExampleInfo& LoadDataReturn::example_info() const {
  return example_info_ != NULL ? *example_info_ : *default_instance_->example_info_;
}
inline ::PS::ExampleInfo* LoadDataReturn::mutable_example_info() {
  set_has_example_info();
  if (example_info_ == NULL) example_info_ = new ::PS::ExampleInfo;
  return example_info_;
}
inline ::PS::ExampleInfo* LoadDataReturn::release_example_info() {
  clear_has_example_info();
  ::PS::ExampleInfo* temp = example_info_;
  example_info_ = NULL;
  return temp;
}
inline void LoadDataReturn::set_allocated_example_info(::PS::ExampleInfo* example_info) {
  delete example_info_;
  example_info_ = example_info;
  if (example_info) {
    set_has_example_info();
  } else {
    clear_has_example_info();
  }
}

// optional int32 hit_cache = 2;
inline bool LoadDataReturn::has_hit_cache() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoadDataReturn::set_has_hit_cache() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoadDataReturn::clear_has_hit_cache() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoadDataReturn::clear_hit_cache() {
  hit_cache_ = 0;
  clear_has_hit_cache();
}
inline ::google::protobuf::int32 LoadDataReturn::hit_cache() const {
  return hit_cache_;
}
inline void LoadDataReturn::set_hit_cache(::google::protobuf::int32 value) {
  set_has_hit_cache();
  hit_cache_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::BCDCall_Command>() {
  return ::PS::BCDCall_Command_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_learner_2fproto_2fbcd_2eproto__INCLUDED

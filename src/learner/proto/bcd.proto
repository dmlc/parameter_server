package PS;
import "util/proto/range.proto";
import "data/proto/data.proto";
import "data/proto/example.proto";
import "parameter/proto/param.proto";

message BCDConfig {
  // Divide a feature group into feature_block_ratio x nnz_feature_per_example
  // blocks
  optional float feature_block_ratio = 1 [default = 4];
  // Use a random order to updating feature block.  Turn it off to elimiate the
  // randomness (often for debuging), but may affects the convergence rate.
  optional bool random_feature_block_order = 2 [default = true];
  // Updating important feature group at the beginning to get a good initial
  // start point.
  repeated int32 prior_fea_group = 14;
  optional int32 num_iter_for_prior_fea_group = 13 [default = 5];

  // Bounded-delay consistency
  optional int32 max_block_delay = 3 [default = 0];
  // max number pass of traing data
  optional int32 max_pass_of_data = 4 [default = 10];
  // convergance critiria. stop if the relative objective <= epsilon
  optional double epsilon = 5 [default = 1e-4];

  // features which occurs <= *tail_feature_freq* will be filtered before training
  optional int32 tail_feature_freq  = 6 [default = 0];
  // countmin sketch is used to filter the tail features. It has two
  // parameters, k and n.
  optional int32 countmin_k = 7 [default = 2];
  // n = the_first_arrive_key_length * num_workers * countmin_n_ratio
  optional double countmin_n_ratio = 8 [default = 2.0];


  optional int32 max_num_parallel_groups_in_preprocessing = 9 [default = 1000];
  optional int32 max_data_buf_size_in_mb = 10 [default = 1000];
  optional DataConfig local_cache = 11;

  optional ParameterInitConfig init_w = 12;
  extensions 100 to 199;
}

message BCDProgress {
  optional double objective = 1;
  optional double relative_obj = 2;
  optional uint64 nnz_w = 5;
  optional double violation = 6;
  optional uint64 nnz_active_set = 7;

  // performance
  optional double total_time = 10;
  repeated double busy_time = 11;

  extensions 100 to 199;
}


message BCDCall {
  enum Command {
    LOAD_DATA = 1;
    PREPROCESS_DATA = 2;
    UPDATE_MODEL = 3;
    EVALUATE_PROGRESS = 4;
    SAVE_MODEL = 5;  // save w
    RECOVER = 6;
    COMPUTE_VALIDATION_AUC = 7;
    // SAVE_AS_DENSE = 7;     // save X * w in a given key range
  }
  required Command cmd = 1;
  optional PbRange key = 2;
  // optional int32 feature_group_id = 3;

  optional double kkt_filter_threshold = 4;
  optional bool reset_kkt_filter = 5;

  repeated int32 fea_grp = 8;
  optional bool hit_cache = 9;
  optional DataConfig data = 10;
}


message LoadDataReturn {
  optional ExampleInfo example_info = 1;
  optional int32 hit_cache = 2;
}

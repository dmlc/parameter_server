* Containerized Parameter Server

The containerized parameter server runs workers and servers on cluster as docker containers managed by a cluster-wide containerized resource manager.

*Requirements*
- A linux cluster with docker installed and can [[http://askubuntu.com/questions/477551/how-can-i-use-docker-without-sudo][run docker without sudo]] 
- On every node clone parameter_server, download data, and place them at same directory (will become more convenient in future)


*Bring up the containerized kubernetes cluster-wide through a single master machine*

#+BEGIN_SRC bash
cd server/script
#make sure you have written minions in server/host/minions_file then 
./kube-up.sh
#if your ssh needs key, instead use
./kube-up.sh your_path_to_key
#+END_SRC

*Check kubernetes*

#+BEGIN_SRC bash
cd ../../client/script
../bin/kubecfg list minions
#+END_SRC

*Submit parameter server*

The following example submits to kubernetes the parameter server with 2 servers, 6 workers, batch learning method, a data directory and a model output directory.

#+BEGIN_SRC bash
python submit.py submit 2 6 batch ../../../example/linear/rcv1/rcv1/train/ ../model/
#+END_SRC

*Check parameter server status and result*

#+BEGIN_SRC bash
../bin/kubecfg list pods
#ssh to scheduler minion and use "docker logs <scheduler_container>" or "cat /tmp/docker/log/scheduler/van_H" to see running status
#cd to your model output directory pointed in the submit command to see model output 
#+END_SRC

*Kill parameter server on kubernetes*

#+BEGIN_SRC bash
python submit.py clear
#+END_SRC

*Show down the kubernetes on cluster*

#+BEGIN_SRC bash
cd ../../server/script
./kube-down.sh
#if your ssh needs key, instead use
./kube-down.sh your_path_to_key
#+END_SRC




